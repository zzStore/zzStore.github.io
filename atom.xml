<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浴火重生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-13T08:41:09.334Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhengzhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1-Springcloud版本介绍</title>
    <link href="http://yoursite.com/2020/08/13/1-Springcloud%E7%89%88%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2020/08/13/1-Springcloud版本介绍/</id>
    <published>2020-08-13T08:40:26.000Z</published>
    <updated>2020-08-13T08:41:09.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h1><h3 id="上篇-SpringBoot2-X版-SpringCloud-H-版"><a href="#上篇-SpringBoot2-X版-SpringCloud-H-版" class="headerlink" title="上篇 SpringBoot2.X版+SpringCloud H 版"></a>上篇 SpringBoot2.X版+SpringCloud H 版</h3><h3 id="下篇-SpringCloud-Alibaba"><a href="#下篇-SpringCloud-Alibaba" class="headerlink" title="下篇 SpringCloud Alibaba"></a>下篇 SpringCloud Alibaba</h3><h3 id="官网查看-cloud与boot-版本对应关系"><a href="#官网查看-cloud与boot-版本对应关系" class="headerlink" title="官网查看 cloud与boot 版本对应关系"></a>官网查看 cloud与boot 版本对应关系</h3><p><a href="https://spring.io/projects/spring-cloud#overflow" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud#overflow</a></p><h3 id="更加详细的cloud与boot版本对应"><a href="#更加详细的cloud与boot版本对应" class="headerlink" title="更加详细的cloud与boot版本对应"></a>更加详细的cloud与boot版本对应</h3><p><a href="https://start.spring.io/actuator/info" target="_blank" rel="noopener">https://start.spring.io/actuator/info</a><br><img src="imgs/版本.png"></p><p><img src="imgs/Cloud升级.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本&quot;&gt;&lt;a href=&quot;#版本&quot; class=&quot;headerlink&quot; title=&quot;版本&quot;&gt;&lt;/a&gt;版本&lt;/h1&gt;&lt;h3 id=&quot;上篇-SpringBoot2-X版-SpringCloud-H-版&quot;&gt;&lt;a href=&quot;#上篇-SpringBoot2-X版-Sp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2-Springcloud项目实践</title>
    <link href="http://yoursite.com/2020/08/13/2-Springcloud%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2020/08/13/2-Springcloud项目实践/</id>
    <published>2020-08-13T08:40:21.000Z</published>
    <updated>2020-08-13T08:41:18.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建父项目"><a href="#新建父项目" class="headerlink" title="新建父项目"></a>新建父项目</h1><ol><li>新建maven工程</li><li>选择模板 org.apache.maven.archetypes:maven-archetypes-site</li><li>选择项目字符编码setting-&gt;editor-&gt;file Encodings -&gt;将所有字符编码全部换成 utf-8</li><li>支持注解setting-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Annotation Processors 内的 Enable annotation processing 打上勾表示能够使用注解。</li><li>更改编译版本setting-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Java Compiler 下 Pe-module butecode version 框内的编译版本换成 8</li><li>删除src文件夹</li></ol><h1 id="父工程POM"><a href="#父工程POM" class="headerlink" title="父工程POM"></a>父工程POM</h1><h1 id="maven中的-dependencyManagement-与-dependencies"><a href="#maven中的-dependencyManagement-与-dependencies" class="headerlink" title="maven中的 dependencyManagement 与 dependencies"></a>maven中的 dependencyManagement 与 dependencies</h1><h3 id="dependencyManagement-父类管理"><a href="#dependencyManagement-父类管理" class="headerlink" title="dependencyManagement 父类管理"></a>dependencyManagement 父类管理</h3><p>Maven 使用dependencyManagement元素提供依赖版本号管理的方式<br>==通常会在一个组织或者项目的最顶级父POM中看到dependencyManagement ==</p><p>使用dependencyManagement可以使所有子项目中引用一个依赖而不用显示列出版本号。Maven会沿父子层级向上走，直到找到dependencyManagement元素的项目 ，然后它就会使用版本号</p><p>如果某一个子项目需要另外一个版本，加上version即可。如果子项目中声明了版本号，那么使用子项目中的jar包。</p><p>dependencyManagement只是声明依赖，并不实现引入，一次子项目需要显式的声明需要用的依赖。</p><h1 id="支付模块构建"><a href="#支付模块构建" class="headerlink" title="支付模块构建"></a>支付模块构建</h1><h3 id="1-cloud-provider-payment8001微服务提供者支持Moudle模块"><a href="#1-cloud-provider-payment8001微服务提供者支持Moudle模块" class="headerlink" title="1. cloud-provider-payment8001微服务提供者支持Moudle模块"></a>1. cloud-provider-payment8001微服务提供者支持Moudle模块</h3><ol><li>建module<ol><li>新建maven工程，不使用任何模板，改jdk为1.8。</li><li>写入项目name即可。</li></ol></li><li>改POM<ol><li>主POM内增加 moudle</li><li>子项目引入依赖</li></ol></li><li>写YML</li><li>主启动</li><li>业务类<h3 id="2-热部署Devtools"><a href="#2-热部署Devtools" class="headerlink" title="2. 热部署Devtools"></a>2. 热部署Devtools</h3></li><li><p>引入坐标依赖</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加插件到父类总工程中</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>工程名字<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启自动编译权限<br>setting-&gt;Build,Execution,Deployment-&gt;Compiler 内复选框全部打勾</p></li><li>开启热注册<ol><li>进入子模块 ctrl shift alt /</li><li>选择 Registry<br> compiler.automake.allow.when.app.running<br> compiler.automake.allow.when.app.running<br> 这两个勾选中</li><li>重启idea</li></ol></li></ol><h3 id="3-cloud-consumer-order80微服务消费者订单Module模块"><a href="#3-cloud-consumer-order80微服务消费者订单Module模块" class="headerlink" title="3. cloud-consumer-order80微服务消费者订单Module模块"></a>3. cloud-consumer-order80微服务消费者订单Module模块</h3><ol><li>建module<ol><li>新建maven工程，不使用任何模板，改jdk为1.8。</li><li>写入项目name即可。</li></ol></li><li>改POM<ol><li>主POM内增加 moudle</li><li>子项目引入依赖</li></ol></li><li>写YML</li><li>主启动</li><li>业务类<ol><li>将第一个子模块支付模块的实体类包复制过来</li><li>新建Controller类</li></ol></li><li><p>使用 RestTemplate 进行两个模块之间的调用，由消费者订单模块调用支付模块。</p><ol><li><p>新建配置类，注册 RestTemplate bean</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写Controller方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">"http://localhost:8001"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/create"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">"/payment/create"</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">"/payment/get/"</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动  </p><ol><li>先启动8001</li><li>再启动 80 </li><li>idea右下角弹出窗口，选择show，共同管理两个端口号</li><li>使用<a href="http://localhost/consumer/payment/get/31访问，80为默认端口号可省略不写" target="_blank" rel="noopener">http://localhost/consumer/payment/get/31访问，80为默认端口号可省略不写</a></li></ol></li></ol></li></ol><h1 id="工程重建："><a href="#工程重建：" class="headerlink" title="工程重建："></a>工程重建：</h1><ol><li>问题项目中有重复部分：两个工程中有完全相同的实体类</li><li>新建公共项目 cloud-api-commons 将公共有的实体类包括工具类等放到里面，所有模块都可以使用<ul><li>导入依赖 lombok devtools 以及 hutool 工具包</li><li>将实体类包导入到项目中</li></ul></li><li>maven clean install<ul><li>点击上面的闪电 跳过测试</li><li>进入 maven 找到新建模块，进入 Lifecycle 先clean再  install重新安装</li><li>注意观察公共模块 pom 文件中必须含有独立的 groupid 和 artifactid</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新建父项目&quot;&gt;&lt;a href=&quot;#新建父项目&quot; class=&quot;headerlink&quot; title=&quot;新建父项目&quot;&gt;&lt;/a&gt;新建父项目&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;新建maven工程&lt;/li&gt;
&lt;li&gt;选择模板 org.apache.maven.archetypes:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>3-Eureka</title>
    <link href="http://yoursite.com/2020/08/13/3-Eureka/"/>
    <id>http://yoursite.com/2020/08/13/3-Eureka/</id>
    <published>2020-08-13T08:39:09.000Z</published>
    <updated>2020-08-13T08:41:29.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Eureka基础知识"><a href="#Eureka基础知识" class="headerlink" title="Eureka基础知识"></a>Eureka基础知识</h1><h3 id="什么是服务注册"><a href="#什么是服务注册" class="headerlink" title="什么是服务注册"></a>什么是服务注册</h3><p>Eureka Server 作为服务注册功能的服务器，它是服务注册中心，而系统中其他微服务，使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接，这样系统维护人员就可以通过 Eureka Server来监控各个微服务是否正常运行。</p><p>在服务注册与发现中有一个注册中心，服务器启动时，会把当前自己的服务器信息比如服务地址，通信地址等注册到注册中心上，另一方（消费者）以别名的方式在注册中心上获取实际的服务器通讯地址，然后再实现本地RPC调用远程RPC。<br><img src="imgs/服务注册.png"></p><h3 id="Eureka的两个组件"><a href="#Eureka的两个组件" class="headerlink" title="Eureka的两个组件"></a>Eureka的两个组件</h3><ol><li>Eureka Server 提供服务注册服务<br>各个微服务节点通过配置启动后，会在 EurekaServer中进行注册，这样 EurekaServer中的服务注册表中将会存储所有可用服务节点的信息。</li><li>EurekaClient通过注册中心进行访问<br>是一个Java客户端，用于简化与 Eureka Server的交互，客户端也同时具备一个内置的，使用 轮询负载算法的负载均衡器。在应用启动后，将会向Eureka Server 发送心跳（默认周期30秒）。如果Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中将这个服务节点移除（默认90秒）</li></ol><h1 id="单机Eureka"><a href="#单机Eureka" class="headerlink" title="单机Eureka"></a>单机Eureka</h1><h3 id="IDEA生成eurekaServer端服务注册中心，类似物业公司"><a href="#IDEA生成eurekaServer端服务注册中心，类似物业公司" class="headerlink" title="IDEA生成eurekaServer端服务注册中心，类似物业公司"></a>IDEA生成eurekaServer端服务注册中心，类似物业公司</h3><ol><li>建Module<br>cloud-eureka-server7001</li><li><p>改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入自己的公共api--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wxh.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写YML</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span> <span class="comment"># eureka服务端实例名称</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己就是注册中心，职责是维护服务实例，并不需要去检索服务</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># 设置与 eureka server交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line"><span class="attr">      defaultZone:</span>  <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 声明自己是 eureka 的服务端</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试<br>浏览器进入 <a href="http://localhost:7001/" target="_blank" rel="noopener">http://localhost:7001/</a> 看能不能看到 eureka 的服务页面</p><h3 id="EurekaClient端cloud-provider-payment8001-将注册进-EurekaServer-成为服务提供者-provider-，类似尚硅谷对外提供授课服务"><a href="#EurekaClient端cloud-provider-payment8001-将注册进-EurekaServer-成为服务提供者-provider-，类似尚硅谷对外提供授课服务" class="headerlink" title="EurekaClient端cloud-provider-payment8001 将注册进 EurekaServer 成为服务提供者 provider ，类似尚硅谷对外提供授课服务"></a>EurekaClient端cloud-provider-payment8001 将注册进 EurekaServer 成为服务提供者 provider ，类似尚硅谷对外提供授课服务</h3></li><li><p>引入坐标依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>更改yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用 负载均衡</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span>  <span class="attr">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>添加注解<br>8001启动类添加@EnableEurekaClient注解</p></li><li>测试<br>进入<a href="http://localhost:7001/可以看到DS" target="_blank" rel="noopener">http://localhost:7001/可以看到DS</a> Replicas<br>Instances currently registered with Eureka 下的服务端口<h3 id="EurekaClient端-cloud-consumer-order80注册进EurekaServer成为服务注册者consumer，类似来尚硅谷上课的同学"><a href="#EurekaClient端-cloud-consumer-order80注册进EurekaServer成为服务注册者consumer，类似来尚硅谷上课的同学" class="headerlink" title="EurekaClient端 cloud-consumer-order80注册进EurekaServer成为服务注册者consumer，类似来尚硅谷上课的同学"></a>EurekaClient端 cloud-consumer-order80注册进EurekaServer成为服务注册者consumer，类似来尚硅谷上课的同学</h3>步骤同上<h1 id="集群Eureka构建步骤"><a href="#集群Eureka构建步骤" class="headerlink" title="集群Eureka构建步骤"></a>集群Eureka构建步骤</h1><h3 id="集群的目的"><a href="#集群的目的" class="headerlink" title="集群的目的"></a>集群的目的</h3>高可用，如果注册中心只有一个，出了故障就会导致整个服务环境不可用<br>解决方法：搭建Eureka注册中心集群，实现负载均衡+故障排错</li></ol><p><img src="imgs/eureka集群.png"><br>多个 eureka serve 相互注册，保障信息共享。</p><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ol><li>将7001模块复制</li><li>粘贴后修改 pom 文件，yml文件，主启动类</li><li>在主 pom 文件中的 moudles 中加入 7002 即可<h3 id="集群与单机的区别"><a href="#集群与单机的区别" class="headerlink" title="集群与单机的区别"></a>集群与单机的区别</h3></li><li>修改映射文件<br>找到 C:\Windows\System32\drivers\etc 下的 hosts文件添加<br>127.0.0.1    eureka7001.com<br>127.0.0.1    eureka7002.com</li><li><p>yml 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅写修改的部分</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># eureka服务端实例名称，集群名字要不同有区分</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line">      <span class="comment"># 设置与 eureka server交互的地址查询服务和注册服务都需要依赖这个地址，因为两台集群所以相互注册</span></span><br><span class="line"><span class="attr">      defaultZone:</span>  <span class="attr">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>测试<br>访问<br><a href="http://eureka7001.com:7001/" target="_blank" rel="noopener">http://eureka7001.com:7001/</a><br><a href="http://eureka7002.com:7002/" target="_blank" rel="noopener">http://eureka7002.com:7002/</a><br>可以看到两者相互注册</p></li><li>问题<br>三台集群如何相互守望注册<h3 id="把微服务模块-payment-与-order-发布到-eureka-集群上"><a href="#把微服务模块-payment-与-order-发布到-eureka-集群上" class="headerlink" title="把微服务模块 payment 与 order 发布到 eureka 集群上"></a>把微服务模块 payment 与 order 发布到 eureka 集群上</h3></li><li>修改两个模块的pom文件<br>defaultZone:  <a href="http://eureka7002.com:7002/eureka/,http://eureka7001.com:7001/eureka/" target="_blank" rel="noopener">http://eureka7002.com:7002/eureka/,http://eureka7001.com:7001/eureka/</a></li><li>测试，启动微服务<ol><li>7001/7002</li><li>8001</li><li>80</li><li><a href="http://localhost/consumer/payment/get/34" target="_blank" rel="noopener">http://localhost/consumer/payment/get/34</a><h3 id="支付模块微服务的集群配置"><a href="#支付模块微服务的集群配置" class="headerlink" title="支付模块微服务的集群配置"></a>支付模块微服务的集群配置</h3></li></ol></li><li>复制模块8001，更改端口为8002</li><li><p>修改 8001与8002的controller</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在各个方法中调用 serverPort 查看端口号</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br></pre></td></tr></table></figure></li><li><p>修改 80 中controller的PAYMENT_URL</p><ul><li>在之前单机版中写死为8001，但是集群后有8001与8002，</li><li>进入 <a href="http://eureka7001.com:7001/" target="_blank" rel="noopener">http://eureka7001.com:7001/</a> 查看 8001 与 8002 对应的名称 application</li><li>将 PAYMENT_URL 改为 http+application 名 :<a href="http://CLOUD-PAYMENT-SERVICE" target="_blank" rel="noopener">http://CLOUD-PAYMENT-SERVICE</a></li><li>此时未开启负载均衡不能访问页面：将80端口下的配置类ApplicationContextConfig 下生成的 RestTemplate 的bean方法上添加注解 @LoadBalanced</li><li><a href="http://localhost/consumer/payment/get/34" target="_blank" rel="noopener">http://localhost/consumer/payment/get/34</a> 访问查看端口号，可以看到在8001与8002之间来回切换<h1 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h1>修改主机名与暴露ip地址<br>可在<a href="http://eureka7002.com:7002/" target="_blank" rel="noopener">http://eureka7002.com:7002/</a> 查看自定义主机名的变化<br>鼠标在主机名上方，浏览器下面会出现ip地址<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">eureka</span></span><br><span class="line"><span class="attr">    instance:</span></span><br><span class="line"><span class="attr">      instance-id:</span> <span class="string">payment8002</span>  <span class="comment"># 自定义主机名</span></span><br><span class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 设置暴露ip地址</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h1><ol><li><p>8001 的 controller添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/discovery"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DiscoveryClient <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 得到所有服务名</span></span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    services.forEach(ele-&gt;&#123;</span><br><span class="line">        log.info(<span class="string">"***service***"</span>+ele);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 得到服务名对应的信息</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"CLOUD-PAYMENT-SERVICE"</span>);</span><br><span class="line">    instances.forEach(ele-&gt;&#123;</span><br><span class="line">        log.info(ele.getServiceId()+<span class="string">"\t"</span>+ele.getHost()+<span class="string">"\t"</span>+ele.getPort()+<span class="string">"\t"</span>+ele.getUri());</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>8001 主类添加注解 @EnableDiscoveryClient</p></li><li>重启服务，观察日志</li></ol><h1 id="eureka自我保护"><a href="#eureka自我保护" class="headerlink" title="eureka自我保护"></a>eureka自我保护</h1><h3 id="自我保护理论"><a href="#自我保护理论" class="headerlink" title="自我保护理论"></a>自我保护理论</h3><ol><li>为什么会产生自我保护？<br>为了防止 EurekaClient 可以正常运行，但是在 EurekaServer 网络不通的情况下，EurekaServer 不会立刻将 EurekaClient 服务剔除。</li><li>什么是自我保护模式？<br>默认情况下，EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90s），但是当网络分区故障发生，微服务与 EurekaServer 之间无法正常通信，以上行为就非常危险。当EurekaServer节点在短时间内丢失过多客户端时，那么这个节点就会进入自我保护模式。<h3 id="禁止自我保护"><a href="#禁止自我保护" class="headerlink" title="禁止自我保护"></a>禁止自我保护</h3></li><li>将 7001 与 8001 改为单机版：修改对应 eureka 地址</li><li><p>yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line">    <span class="comment"># 关闭自我保护机制</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 心跳时间默认90s，改为2000ms，即2s</span></span><br><span class="line"><span class="attr">    eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line">    <span class="comment">#eureka客户端发送心跳的时间间隔，默认30s</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#eureka服务端在收到最后一次心跳等待的时间上线，默认90s</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><ol><li>访问 <a href="http://eureka7001.com:7001/" target="_blank" rel="noopener">http://eureka7001.com:7001/</a> 可以看到红字THE SELF PRESERVATION MODE IS TURNED OFF. THIS MAY NOT PROTECT INSTANCE EXPIRY IN CASE OF NETWORK/OTHER PROBLEMS.代表自我保护关闭</li><li>关闭8001服务可以看到在 eureka 页面两秒后 8001 服务消失</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Eureka基础知识&quot;&gt;&lt;a href=&quot;#Eureka基础知识&quot; class=&quot;headerlink&quot; title=&quot;Eureka基础知识&quot;&gt;&lt;/a&gt;Eureka基础知识&lt;/h1&gt;&lt;h3 id=&quot;什么是服务注册&quot;&gt;&lt;a href=&quot;#什么是服务注册&quot; class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4-Zookeeper</title>
    <link href="http://yoursite.com/2020/08/13/4-Zookeeper/"/>
    <id>http://yoursite.com/2020/08/13/4-Zookeeper/</id>
    <published>2020-08-13T08:38:59.000Z</published>
    <updated>2020-08-13T08:41:38.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置虚拟机和zookeeper"><a href="#配置虚拟机和zookeeper" class="headerlink" title="配置虚拟机和zookeeper"></a>配置虚拟机和zookeeper</h1><ol><li>虚拟机终端输入ifconfig查看 ens33 下的端口号</li><li>查看主机与虚拟机之间通信是否畅通<ol><li>虚拟机端口号：ifconfig查看 ens33 下的端口号</li><li>主机端口号：网络连接下的 VMnet8 的端口号</li><li>使用虚拟机ping主机，使用主机ping虚拟机确保都可以ping通</li></ol></li><li><p>新建项目</p><ol><li>pom <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>解压zookeeper<br>#tar -zxvf zookeeper-3.4.10.tar.gz</p></li><li>启动 zookeeper<br>==注意此时应该修改conf里的zoo_sample.cfg名字为zoo.cfg==<br>[root@localhost ~]# cd /usr/local/zookeeper/zookeeper-3.4.14/bin<br>[root@localhost bin]# ./zkServer.sh start</li><li>启用端口<br>[root@localhost bin]# ./zkCli.sh<br>Connecting to localhost:2181<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3>==注意：==</li><li>排除zookeeper-discovery中自带的 zookeeper，同时引入与linux相同版本的 zookeeper</li><li>排除引入 zookeeper 的日志，因为日志会会冲突<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入自己的公共api--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wxh.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除自身的zookeeper        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加zookeeper,与linux上的版本一致     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="yml-文件"><a href="#yml-文件" class="headerlink" title="yml 文件"></a>yml 文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    zookeeper:</span></span><br><span class="line">      <span class="comment"># ip地址为linux中的网络接口，2181为zookeeper的默认端口</span></span><br><span class="line"><span class="attr">      connect-string:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.66</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><h3 id="linux测试"><a href="#linux测试" class="headerlink" title="linux测试"></a>linux测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /services</span><br><span class="line">[cloud-provider-payment]</span><br></pre></td></tr></table></figure><p>能看到服务名即为配置成功</p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><ol><li><a href="http://localhost:8004/payment/zk" target="_blank" rel="noopener">http://localhost:8004/payment/zk</a><br>可以看到信息</li><li>linux <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 获取服务名</span><br><span class="line">[zk: localhost:2181(CONNECTED) 0] ls /services</span><br><span class="line">[cloud-provider-payment]</span><br><span class="line"># 获取流水号</span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /services/cloud-provider-payment</span><br><span class="line">[efc76371-522d-4d5d-8f56-f8fe4deb7a47]</span><br><span class="line"># 获取详细信息</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] get /services/cloud-provider-payment/efc76371-522d-4d5d-8f56-f8fe4deb7a47</span><br><span class="line">&#123;&quot;name&quot;:&quot;cloud-provider-payment&quot;,&quot;id&quot;:&quot;efc76371-522d-4d5d-8f56-f8fe4deb7a47&quot;,&quot;address&quot;:&quot;WINDOWS-N0GUAG7&quot;,&quot;port&quot;:8004,&quot;sslPort&quot;:null,&quot;payload&quot;:&#123;&quot;@class&quot;:&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;,&quot;id&quot;:&quot;application-1&quot;,&quot;name&quot;:&quot;cloud-provider-payment&quot;,&quot;metadata&quot;:&#123;&#125;&#125;,&quot;registrationTimeUTC&quot;:1590232919360,&quot;serviceType&quot;:&quot;DYNAMIC&quot;,&quot;uriSpec&quot;:&#123;&quot;parts&quot;:[&#123;&quot;value&quot;:&quot;scheme&quot;,&quot;variable&quot;:true&#125;,&#123;&quot;value&quot;:&quot;://&quot;,&quot;variable&quot;:false&#125;,&#123;&quot;value&quot;:&quot;address&quot;,&quot;variable&quot;:true&#125;,&#123;&quot;value&quot;:&quot;:&quot;,&quot;variable&quot;:false&#125;,&#123;&quot;value&quot;:&quot;port&quot;,&quot;variable&quot;:true&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="服务节点是临时还是持久"><a href="#服务节点是临时还是持久" class="headerlink" title="服务节点是临时还是持久"></a>服务节点是临时还是持久</h3><p>关闭8004后在linux终端中,一段时间后失去连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 18] ls /services/cloud-provider-payment</span><br><span class="line">[efc76371-522d-4d5d-8f56-f8fe4deb7a47]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 19] ls /services/cloud-provider-payment</span><br><span class="line">[efc76371-522d-4d5d-8f56-f8fe4deb7a47]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 20] ls /services/cloud-provider-payment</span><br><span class="line">[efc76371-522d-4d5d-8f56-f8fe4deb7a47]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 21] ls /services/cloud-provider-payment</span><br><span class="line">[]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 22]</span><br></pre></td></tr></table></figure></p><p>再开启8004，再次查看流水号可以发现流水号跟之前的不一样 ，所以服务节点是临时的，在关闭服务后完全删除。</p><h1 id="订单服务入住zookeeper"><a href="#订单服务入住zookeeper" class="headerlink" title="订单服务入住zookeeper"></a>订单服务入住zookeeper</h1><ol><li>新建订单 moudle</li><li>该pom</li><li><p>建yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-consumerzk-order80</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    zookeeper:</span></span><br><span class="line"><span class="attr">      connect-string:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.66</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li><li><p>写主类</p></li><li>配置类生成 RestTemplate</li><li>Controller 调用 8004</li><li><p>linux 输入，查看节点是否注册上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /services</span><br><span class="line">[cloud-provider-payment, cloud-consumerzk-order80]</span><br></pre></td></tr></table></figure></li><li><p>网址登陆查看<br><a href="http://localhost:8004/payment/zk" target="_blank" rel="noopener">http://localhost:8004/payment/zk</a><br><a href="http://localhost/consumer/payment/zk" target="_blank" rel="noopener">http://localhost/consumer/payment/zk</a></p></li></ol><h1 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h1><p>zookeeper集群?????????</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;配置虚拟机和zookeeper&quot;&gt;&lt;a href=&quot;#配置虚拟机和zookeeper&quot; class=&quot;headerlink&quot; title=&quot;配置虚拟机和zookeeper&quot;&gt;&lt;/a&gt;配置虚拟机和zookeeper&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;虚拟机终端输入ifcon
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5-Consul</title>
    <link href="http://yoursite.com/2020/08/13/5-Consul/"/>
    <id>http://yoursite.com/2020/08/13/5-Consul/</id>
    <published>2020-08-13T08:38:49.000Z</published>
    <updated>2020-08-13T08:41:51.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p><a href="https://www.consul.io/intro" target="_blank" rel="noopener">https://www.consul.io/intro</a><br>Consul是一种服务网格解决方案，提供具有服务发现，配置和分段功能的全功能控制平面。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建完整的服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。Consul附带了一个简单的内置代理，因此一切都可以直接使用，还支持Envoy等第三方代理集成。</p><h3 id="能做什么？"><a href="#能做什么？" class="headerlink" title="能做什么？"></a>能做什么？</h3><ul><li><p>服务发现：Consul的客户端可以注册服务，例如 api或mysql，其他客户端可以使用Consul来发现给定服务的提供者。使用DNS或HTTP，应用程序可以轻松找到它们依赖的服务。</p></li><li><p>运行状况检查：领事客户端可以提供任何数量的运行状况检查，这些检查可以与给定服务（“ Web服务器返回200 OK”）或与本地节点（“内存利用率低于90％”）相关联。操作员可以使用此信息来监视群集的运行状况，服务发现组件可以使用此信息将流量路由到运行状况不佳的主机之外。</p></li><li><p>KV商店：应用程序可以将Consul的分层键/值存储用于多种目的，包括动态配置，功能标记，协调，领导者选举等。简单的HTTP API使其易于使用。</p></li><li><p>安全的服务通信：领事可以为服务生成并分发TLS证书，以建立相互TLS连接。 意图 可用于定义允许哪些服务进行通信。可以使用可以实时更改的意图轻松管理服务分段，而不必使用复杂的网络拓扑和静态防火墙规则。</p></li><li><p>多数据中心：Consul开箱即用地支持多个数据中心。这意味着Consul的用户不必担心会构建其他抽象层以扩展到多个区域。</p><h3 id="去哪下？"><a href="#去哪下？" class="headerlink" title="去哪下？"></a>去哪下？</h3><p><a href="https://www.consul.io/downloads" target="_blank" rel="noopener">https://www.consul.io/downloads</a></p><h3 id="怎么玩？"><a href="#怎么玩？" class="headerlink" title="怎么玩？"></a>怎么玩？</h3><p><a href="https://www.springcloud.cc/spring-cloud-consul.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-cloud-consul.html</a></p><h1 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h1></li></ul><ol><li>将下载的exe文件双击即可安装</li><li>在 exe ==文件的目录==下打开黑窗口</li><li>输入 consul –version 检测是否安装成功</li><li>启动服务：consul agent -dev</li><li>通过 <a href="http://localhost:8500/" target="_blank" rel="noopener">http://localhost:8500/</a> 访问web界面<h1 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h1></li><li><p>改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8006</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>建启动类</p></li><li>建controller类</li><li>测试<br><a href="http://localhost:8006/payment/consul" target="_blank" rel="noopener">http://localhost:8006/payment/consul</a><br><a href="http://localhost:8500/ui/dc1/services" target="_blank" rel="noopener">http://localhost:8500/ui/dc1/services</a><h1 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h1></li><li><p>改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>建启动类</p></li><li>建controller</li><li>测试<br><a href="http://localhost/consumer/payment/cs" target="_blank" rel="noopener">http://localhost/consumer/payment/cs</a><br><a href="http://localhost:8006/payment/consul" target="_blank" rel="noopener">http://localhost:8006/payment/consul</a><h1 id="三个注册中心-eureka-zookeeper-consul的异同点"><a href="#三个注册中心-eureka-zookeeper-consul的异同点" class="headerlink" title="三个注册中心 eureka zookeeper consul的异同点"></a>三个注册中心 eureka zookeeper consul的异同点</h1><img src="imgs/注册中心区别.png"></li></ol><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p>C:Cosistency（强一致性）<br>A:Availability（可用性）<br>P:Partition tolerance（分区容错性）<br>CAP理论关注粒度是数据，而不是整体系统设计的</p><p><img src="imgs/CAP.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>6-Ribbon</title>
    <link href="http://yoursite.com/2020/08/13/6-Ribbon/"/>
    <id>http://yoursite.com/2020/08/13/6-Ribbon/</id>
    <published>2020-08-13T08:38:40.000Z</published>
    <updated>2020-08-13T08:42:06.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套==客户端负载均衡的工具==。<br>简单的说，Ribbonn是Netflix的开源项目，主要功能 是提供==客户端的软件负载均衡算法和服务调用。==Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等。就是在配置文件中列出 Loa Balancer后面所有机器，Ribbon会自动帮助你基于某种规则 (如简单轮询，随机连接等)去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><h3 id="官网资料，停更"><a href="#官网资料，停更" class="headerlink" title="官网资料，停更"></a>官网资料，停更</h3><p><a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">https://github.com/Netflix/ribbon</a></p><h3 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h3><ol><li>负载均衡<ul><li>负载均衡(Load Balance)是什么<br>  将用户的请求平摊的分配到多个服务上，从而达到HA(高可用)，常见的负载均衡有 Nginx,LVS,硬件 F5等。</li><li>Ribbon 本地负载均衡客户端 VS Nginx 服务端负载均衡<br>  Nginx 是服务器 负载均衡，客户端所有请求都会交给 nginx，然后由 nginx实现请求转发。即负载均衡是由服务端实现的。<br>  Ribbon 是本地负载均衡，在微服务调用接口时，在注册中心上获取注册信息服务列表 之后缓存在JVM本地，从而实现本地RPC远程服务调用技术。</li></ul></li><li>实现<br>负载均衡+RestTemplate 调用</li></ol><p><img src="imgs/Ribbon.png"></p><ul><li>Ribbon工作时有两步<ol><li>第一步先选择 EurekaServer，优先选择统一区域负载较少的 server</li><li>第二部再根据用户指定的策略，从server取到的服务注册列表中选择一个地址。其中 Riibon 提供了多种策略（轮询，随机，根据响应时间加权）。</li></ol></li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>不需要<br>spring-cloud-starter-netflix-eureka-client 已经引入了 Ribbon-Balance的依赖</p><h1 id="RestTemplate-使用"><a href="#RestTemplate-使用" class="headerlink" title="RestTemplate 使用"></a>RestTemplate 使用</h1><ol><li>getForObject 返回json</li><li>getForEntity 返回ResponseEnity对象，包括响应头，响应体等信息。</li><li>postForObject<br>与 get 方法一样，不同的是传进去的参数是对象</li><li>postForEntity</li><li>GET 请求方法</li><li>POST请求方法</li></ol><h1 id="Ribbon-自带的负载均衡"><a href="#Ribbon-自带的负载均衡" class="headerlink" title="Ribbon 自带的负载均衡"></a>Ribbon 自带的负载均衡</h1><h3 id="核心组件-IRule"><a href="#核心组件-IRule" class="headerlink" title="核心组件 IRule"></a>核心组件 IRule</h3><h6 id="IRule默认自带的负载规则"><a href="#IRule默认自带的负载规则" class="headerlink" title="IRule默认自带的负载规则"></a>IRule默认自带的负载规则</h6><ol><li>RoundRobinRule   轮询</li><li>RandomRule   随机</li><li>RetryRule    先按照RoundRobinRule的 策略获取服务，如果获取服务失败则在指定时间里进行重试，获取可用服务</li><li>WeightedResponseTimeRule 对RoundRobinRule的扩展，响应速度越快，实例选择权重越大 ，越容易被选择</li><li>BestAvailableRule    会先过滤掉由于多次访问故障而处于断路器 跳闸状态的服务，然后选择一个并发一个最小的服务</li><li>BestAvaibilityFilteringRule  先过滤掉故障实例，再选择并发量较小的实例</li><li>ZoneAvoidanceRule    默认规则，符合server所在区域的性能和server的可用性选择服务器<h6 id="如何替换"><a href="#如何替换" class="headerlink" title="如何替换"></a>如何替换</h6></li><li>注意：IRule配置类不能放在@ComponentSan 的包及子包下，因为默认的扫描会变成全局负载均衡都按照这样的规则。</li><li>新建包 com.wxh.myRule</li><li><p>新建类 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();<span class="comment">//定义为随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择要接收的服务和配置类</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>,configuration = MySelfRule.class)</span><br></pre></td></tr></table></figure></li></ol><h3 id="默认负载均衡轮回算法原理"><a href="#默认负载均衡轮回算法原理" class="headerlink" title="默认负载均衡轮回算法原理"></a>默认负载均衡轮回算法原理</h3><h6 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h6><p>rest 接口 第几次请求数 % 服务器集群=实际调用服务器位置下标，每次服务重启后rest接口计数从1开始</p><p>总台数：2台</p><p>请求数  调用下标<br>1       1%2=1<br>2       2%2=0<br>3       3%2=1<br>4       4%2=0</p><h6 id="RoundRobinRule源码分析"><a href="#RoundRobinRule源码分析" class="headerlink" title="RoundRobinRule源码分析"></a>RoundRobinRule源码分析</h6><p>跳过41集</p><h6 id="手写轮回算法"><a href="#手写轮回算法" class="headerlink" title="手写轮回算法"></a>手写轮回算法</h6><p>跳过42集</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>7-OpenFeign</title>
    <link href="http://yoursite.com/2020/08/13/7-OpenFeign/"/>
    <id>http://yoursite.com/2020/08/13/7-OpenFeign/</id>
    <published>2020-08-13T08:38:23.000Z</published>
    <updated>2020-08-13T08:42:20.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p>Feign是声明性Web服务客户端。它使编写Web服务客户端更加容易。要使用Feign，请创建一个接口并对其进行注释。它具有可插入的注释支持，包括Feign注释和JAX-RS注释。Feign还支持可插拔编码器和解码器。Spring Cloud添加了对Spring MVC注释的支持，并支持使用HttpMessageConvertersSpring Web中默认使用的注释。Spring Cloud集成了Ribbon和Eureka以及Spring Cloud LoadBalancer，以在使用Feign时提供负载平衡的http客户端。</p><h1 id="能干什么"><a href="#能干什么" class="headerlink" title="能干什么"></a>能干什么</h1><ul><li>使编写Java Http客户端更加容易<br>使用 RestTemplate+Ribbon 时，利用 RestTemplate 对http 请求的封装处理，形成一套模板化的调用方法，但是在实际中，由于对服务的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以Feign在此基础上做了进一步封装，由他来帮助我们定义和实现服务接口的定义。在==Feign的实现下我们只需要创建一个接口并使用注解来配置它(以前是Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可)==。自动封装服务调用客户端的开发量。</li><li>Feign集成了Ribbon<br>利用Ribbon维护了Payment的服务列表信息，并且实现了轮询实现客户端的负载均衡。而与Ribbon不同的是，==feign只需要定义服务绑定接口且以声明式的方法==，优雅而简单的实现服务调用。</li><li>Feign与OpenFeign区别<br><img src="imgs/feign与OpenFeign区别.png"></li></ul><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/</a></p><h1 id="建项目：cloud-consumer-frign-order80"><a href="#建项目：cloud-consumer-frign-order80" class="headerlink" title="建项目：cloud-consumer-frign-order80"></a>建项目：cloud-consumer-frign-order80</h1><ol><li>改pom</li><li>建yml</li><li><p>写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>写业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 将业务提供者的名写进去</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将业务提供者的controller路径和方法复制粘贴进来</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h1><ol><li>8001 暂停</li><li>通过 8001访问<br><a href="http://localhost:8001/timeout" target="_blank" rel="noopener">http://localhost:8001/timeout</a><br>可以访问</li><li>通过80 访问<br>异常</li><li>OpenFeign 默认等待时间 1s</li><li>设置超时时间</li><li>测试<h1 id="日志增强"><a href="#日志增强" class="headerlink" title="日志增强"></a>日志增强</h1><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3></li><li>NONE：默认不显示日志</li><li>BASIC：仅记录请求方法，URL，响应状态及执行时间</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息</li><li>FULL：除了HEADERS中定义的信息外，还有请求和响应的正文及元数据<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="选择日志监听接口"><a href="#选择日志监听接口" class="headerlink" title="选择日志监听接口"></a>选择日志监听接口</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span> </span><br><span class="line">    <span class="comment"># 选择具体接口的日志输出 级别为debug</span></span><br><span class="line">    <span class="string">com.wxh.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h1&gt;&lt;p&gt;Feign是声明性Web服务客户端。它使编写Web服务客户端更加容易。要使用Feign，请创建一个接口并对其进行注释。它具有可插入的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>8-Hystrix</title>
    <link href="http://yoursite.com/2020/08/13/8-Hystrix/"/>
    <id>http://yoursite.com/2020/08/13/8-Hystrix/</id>
    <published>2020-08-13T08:38:11.000Z</published>
    <updated>2020-08-13T08:42:33.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h3><p>复杂分布式系统中的应用程序有数十个依赖关系，每个依赖关系在某些时候不可避免的失败。</p><p>多个微服务之间调用时，假设 A 调B和C，B和C又调其他微服务，就是所谓的扇出。当扇出的链路上某个微服务响应时间过长或不可用对A的调用就会占用越来越多的资源，进而引起系统崩溃 ，所谓的雪崩效应。</p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Hystrix 是处理分布式系统的延迟和容错的开源库，保证一个依赖出现问题时不会导致整体服务失败，避免级联故障，以提高分布式系统弹性。<br>断路器本身是一种开关装置，当某个服务单元发生故障后，通过断路器的故障监控，向调用方返回一个符合预期的可处理的备选响应，而不是长时间的等待或抛出调用方法无法处理的异常 。</p><h3 id="官网资料"><a href="#官网资料" class="headerlink" title="官网资料"></a>官网资料</h3><p><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix</a><br>停更</p><h1 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h1><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><ol><li>服务器忙，请稍后重试，不让客户端等待并立即返回一个友好的提示。</li><li>哪些情况会导致服务降级<ol><li>程序运行异常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3></li></ol></li><li>类比保险丝达到最大服务访问时，直接拒绝访问，拉闸限电，然后调用服务降级的方法返回友好提示。</li><li>服务降级-&gt;进而熔断-&gt;恢复调用链路<h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3></li><li>秒杀高并发等操作，严禁一窝蜂过来拥挤，一秒N个有序进行。<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h3 id="准备cloud-provider-hystrix-payment8001"><a href="#准备cloud-provider-hystrix-payment8001" class="headerlink" title="准备cloud-provider-hystrix-payment8001"></a>准备cloud-provider-hystrix-payment8001</h3>将 7001换成单机版<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3></li><li>新建 </li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defauleZone:</span>  <span class="attr">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>主启动</p></li><li>业务类</li><li>测试<br>先启动7001，在启动8001测试两个方法，全部正常<h3 id="使用Jmeter模拟高并发"><a href="#使用Jmeter模拟高并发" class="headerlink" title="使用Jmeter模拟高并发"></a>使用Jmeter模拟高并发</h3>51集<br>高并发打到<a href="http://localhost:8001/timeout/1上" target="_blank" rel="noopener">http://localhost:8001/timeout/1上</a><h6 id="使用后"><a href="#使用后" class="headerlink" title="使用后"></a>使用后</h6><a href="http://localhost:8001/ok/1" target="_blank" rel="noopener">http://localhost:8001/ok/1</a> 也有延迟<br>上述还是8001单独测试，如果外部消费者80也来访问，那么消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死。<h6 id="加入80"><a href="#加入80" class="headerlink" title="加入80"></a>加入80</h6></li><li>建moudle cloud-consumer-feign-hystrix-order80</li><li>pom</li><li>yml</li><li>主启动类</li><li>service</li><li>controller</li><li>测试<ol><li>正常情况下<ol><li><a href="http://localhost:8001/ok/1" target="_blank" rel="noopener">http://localhost:8001/ok/1</a></li><li><a href="http://localhost:8001/timeout/1" target="_blank" rel="noopener">http://localhost:8001/timeout/1</a></li><li><a href="http://localhost/ok/1" target="_blank" rel="noopener">http://localhost/ok/1</a></li><li>通过80 访问的非常快</li></ol></li><li>高并发打到8001端口时,80端口也会非常慢<h6 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h6></li></ol></li><li>超时导致服务器变慢（转圈）-&gt;超时不再等待</li><li>出错（宕机或程序运行时出错）-&gt;出错要有兜底</li><li>解决<ol><li>8001 超时，调用者 80 不能一直等待，必须有服务降级</li><li>服务 8001 宕机，调用者 80 不能一直等待，必须有服务降级</li><li>服务 8001 OK ，调用者自己出故障或有自我要求（自己的等待时间小于服务提供的时间。），自己降级处理<h1 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h1><h3 id="超时：8001"><a href="#超时：8001" class="headerlink" title="超时：8001"></a>超时：8001</h3>service<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">"ok"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置超过 3 秒采用服务降级</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_TimeoutHandler"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value = <span class="string">"3000"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Timeout</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">"Timeout"</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异常后调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"服务超时，调用服务降级成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>main<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br></pre></td></tr></table></figure></p><h3 id="运行异常：8001"><a href="#运行异常：8001" class="headerlink" title="运行异常：8001"></a>运行异常：8001</h3><p>service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_TimeoutHandler"</span>,commandProperties = &#123;</span><br><span class="line">            <span class="meta">@HystrixProperty</span>(name=<span class="string">"execution.isolation.thread.timeoutInMilliseconds"</span>,value = <span class="string">"3000"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Timeout</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            TimeUnit.SECONDS.sleep(5);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"线程池："</span>+Thread.currentThread().getName()+<span class="string">"Timeout"</span>+id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>无论是运行异常还是超时都有兜底策略</p><h3 id="订单侧：80，先去掉8001的超时和异常"><a href="#订单侧：80，先去掉8001的超时和异常" class="headerlink" title="订单侧：80，先去掉8001的超时和异常"></a>订单侧：80，先去掉8001的超时和异常</h3><p>==既可以配在客户端也可以配在服务端，一般建议放在客户端==</p><ol><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>controller<br>改为同 8001 的 service 一样</p></li><li>主类<br>添加 @EnableHystrix 注解</li><li>注意：降级处理方法参数列表必须跟异常方法一样<h3 id="全面服务降级"><a href="#全面服务降级" class="headerlink" title="全面服务降级"></a>全面服务降级</h3><h6 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h6></li><li>每一个方法都需要配置一个降级方法</li><li>和业务代码在一起<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6></li><li><p>第一个问题<br> controller</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="comment">// 1. 添加注解，标注全局服务降级方法</span></span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"paymentGlobalFallBack"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 写 @HystrixCommand单不指定具体方法 </span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/ok/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> service.paymentInfo_OK(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"80异常，降级处理"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 定义全局服务降级方法</span></span><br><span class="line">    <span class="comment">// 下面是全局 fallback</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentGlobalFallBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"80：获取异常，调用方法为全局fallback"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二个问题</p><ol><li>找到注解 @FeignClient 对应的接口</li><li><p>再写一个类实现该接口，对降级方法进行处理</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"CLOUD-PROVIDER-HYSTRIX-PAYMENT"</span>,fallback = PaymentFallBackService.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallBackService</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试在 8001 内加异常，或使 8001 宕机 ，返回异常处理</p><h1 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h1><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>类比保险丝，达到最大访问后直接拒绝访问，拉闸限电，然后调用服务降级。当检测==到该节点微服务调用正常后，恢复调用链路。==<br>当失败的调用达到一定阈值，缺省是5s内20次调用失败，就会启动熔断机制。熔断机制的注解是，@HystrixCommand</p><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">https://martinfowler.com/bliki/CircuitBreaker.html</a></p><h3 id="实践：8001"><a href="#实践：8001" class="headerlink" title="实践：8001"></a>实践：8001</h3></li></ol></li><li><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务熔断</span></span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"paymentInfo_Circuit"</span>,commandProperties = &#123;</span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.enabled"</span>,value = <span class="string">"true"</span>),<span class="comment">//是否开启断路器</span></span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.requestVolumeThreshold"</span>,value = <span class="string">"10"</span>),<span class="comment">// 请求次数</span></span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.sleepWindowInMilliseconds"</span>,value = <span class="string">"10000"</span>),<span class="comment">// 时间窗口期</span></span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name=<span class="string">"circuitBreaker.errorThresholdPercentage"</span>,value = <span class="string">"60"</span>)<span class="comment">// 失败率</span></span><br><span class="line">        <span class="comment">// 加起来就是在10s内的10次请求中如果失败超过6次进入服务熔断</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"id 不能为负数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"调用成功："</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_Circuit</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id不能为负数："</span>+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/circuit/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">"************"</span>+result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果<br>一直输入id为负数，达到失败率后即使输入id为正数也进入错误页面。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h3 id="熔断类型"><a href="#熔断类型" class="headerlink" title="熔断类型"></a>熔断类型</h3></li><li>熔断打开<br>请求不再进行调用当前服务，内部设有时钟一般为 MTTR，当打开时长达时钟则进入半熔断状态</li><li>熔断关闭<br>熔断关闭不会对服务进行熔断</li><li>熔断半开<br>根据规则调用当前服务，符合规则恢复正常，关闭熔断<h3 id="什么时候打开"><a href="#什么时候打开" class="headerlink" title="什么时候打开"></a>什么时候打开</h3>设计三个参数：时间窗，请求总阈值，错误百分比阈值</li><li>快照时间窗：默认为最近的10s</li><li>请求总数阈值：必须满足请求总阈值才有资格熔断。默认为20。意味着在10s内，如果命令调用次数不足20次，即使所有请求都超时或其他原因失败断路器都不会打开</li><li>错误百分比阈值：在快照时间窗内请求总数超过阈值，且错误次数占总请求次数的比值大于阈值，断路器将会打开</li></ol><h1 id="web界面图形化展示Dashboard"><a href="#web界面图形化展示Dashboard" class="headerlink" title="web界面图形化展示Dashboard"></a>web界面图形化展示Dashboard</h1><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><ol><li>建 moudle<br>cloud-consumer-hystrix-dashboard9001</li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml<br>只需要配置端口号就行</p></li><li>启动类<br>加注解@EnableHystrixDashboard</li><li>测试<br><a href="http://localhost:9001/hystrix有页面即为成功" target="_blank" rel="noopener">http://localhost:9001/hystrix有页面即为成功</a></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ol><li>注意：依赖于actuator，要监控哪个接口，哪个接口必须有这个依赖</li><li>业务模块需要添加bean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">    ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">    registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    registrationBean.addUrlMappings(<span class="string">"/hystrix.stream"</span>);</span><br><span class="line">    registrationBean.setName(<span class="string">"HystrixMetricsStreamServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><p><img src="imgs/dashboard.png"></p><ol><li>进行8001 的访问查看对应页面变化</li><li>页面状态<ol><li>七色<br> 对应不同状态</li><li>一圈<br> 对应访问量</li><li>一线<br> 访问趋势</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;分布式系统面临的问题&quot;&gt;&lt;a href=&quot;#分布式系统面临的问题&quot; class=&quot;headerlink&quot; title=&quot;分布式系统
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>9-GetWay</title>
    <link href="http://yoursite.com/2020/08/13/9-GetWay/"/>
    <id>http://yoursite.com/2020/08/13/9-GetWay/</id>
    <published>2020-08-13T08:37:58.000Z</published>
    <updated>2020-08-13T08:42:42.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/</a></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="imgs/springcloud结构.png"></p><p><img src="imgs/网关作用.png"></p><h3 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h3><ol><li>Route（路由）<br>网关的基本构建块。它由ID，目标URI，谓词集合和过滤器集合定义。如果断言为true，则匹配路由。</li><li>Predicate（断言）<br>这是Java 8 Function谓词。输入类型是Spring FrameworkServerWebExchange。这使您可以匹配HTTP请求中的所有内容，例如标头或参数。</li><li>Filter（过滤器）<br>这些是使用特定工厂构造的Spring FrameworkGatewayFilter实例。在这里，您可以在发送下游请求之前或之后修改请求和响应。</li></ol><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="imgs/gateway工作流程.png"></p><p>客户端向Spring Cloud Gateway发出请求。如果网关处理程序映射确定请求与路由匹配，则将其发送到网关Web处理程序。该处理程序通过特定于请求的过滤器链来运行请求。筛选器由虚线分隔的原因是，筛选器可以在发送代理请求之前和之后运行逻辑。所有“前置”过滤器逻辑均被执行。然后发出代理请求。发出代理请求后，将运行“后”过滤器逻辑。</p><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h3 id="建模块-cloud-gateway-gateway9527"><a href="#建模块-cloud-gateway-gateway9527" class="headerlink" title="建模块:cloud-gateway-gateway9527"></a>建模块:cloud-gateway-gateway9527</h3><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意不要添加 web的依赖，与gateway里的web flux冲突 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">       register-with-eureka:</span>  <span class="literal">true</span></span><br><span class="line"><span class="attr">       fetch-registry:</span>  <span class="literal">true</span></span><br><span class="line"><span class="attr">       defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure></li><li><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li><p>9527中配置路由</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      routes:</span> <span class="comment"># 可以配置多个路由</span></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">payment_routh</span> <span class="comment"># 路由id，没有固定规则但要求唯一</span></span><br><span class="line"><span class="attr">          uri:</span>  <span class="attr">http://localhost:8001</span> <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/payment/get/**</span> <span class="comment"># 路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">payment_routh2</span> <span class="comment"># 路由id，没有</span></span><br><span class="line"><span class="attr">          uri:</span>  <span class="attr">http://localhost:8001</span> <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/payment/payment</span> <span class="comment"># 路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure></li><li><p>配置后可以通过以下路径访问8001中的信息<br><a href="http://localhost:9527/payment/get/31" target="_blank" rel="noopener">http://localhost:9527/payment/get/31</a><br>不再暴露8001的端口</p></li><li>配置路由的另一种方法，9527注入 RouteLocator的Bean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">routeLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder  routes = routeLocatorBuilder.routes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 代表访问http://localhost:9527/guonei</span></span><br><span class="line"><span class="comment">        * 跳转到http://news.baidu.com/guonei</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        routes.route(<span class="string">"route1"</span>,</span><br><span class="line">                r-&gt;r.path(<span class="string">"/guonei"</span>)</span><br><span class="line">                .uri(<span class="string">"http://news.baidu.com/guonei"</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h1><ol><li>9527yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        locator:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span> <span class="comment"># 1.开启从服务在注册中心动态创建路由的功能</span></span><br><span class="line"><span class="attr">      routes:</span></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">payment_routh</span></span><br><span class="line"><span class="comment">#          uri:  http://localhost:8001 # 匹配后提供服务的路由地址</span></span><br><span class="line"><span class="attr">          uri:</span>  <span class="attr">lb://cloud-payment-service</span> <span class="comment"># 2.输入服务名，lb代表负载均衡</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/payment/get/**</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">        - id:</span> <span class="string">payment_routh2</span> </span><br><span class="line"><span class="comment">#          uri:  http://localhost:8001 # 匹配后提供服务的路由地址</span></span><br><span class="line"><span class="attr">          uri:</span>  <span class="attr">lb://cloud-payment-service</span> <span class="comment"># 2.输入服务名，lb代表负载均衡</span></span><br><span class="line"><span class="attr">          predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/payment/create</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Predicate的使用"><a href="#Predicate的使用" class="headerlink" title="Predicate的使用"></a>Predicate的使用</h1><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#the-between-route-predicate-factory" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#the-between-route-predicate-factory</a><br>全部在 yml的Predicate之下</p><ol><li>After<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在该时间之后可以使用</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">After=2020-05-26T17:07:03.043+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure></li></ol><p>获取当前时区的时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZonedDateTime z = ZonedDateTime.now();<span class="comment">// 默认时区</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>Before</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之前</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Before=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure></li><li><p>Between</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 之间</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Between=2017-01-20T17:42:47.789-07:00[America/Denver],</span> <span class="number">2017</span><span class="bullet">-01</span><span class="bullet">-21</span><span class="attr">T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure></li><li><p>Cookie</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看有没有指定kv的cookie</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Cookie=username,wxh</span></span><br></pre></td></tr></table></figure></li><li><p>Header</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求头，跟cookie一样指定kv键值对</span></span><br></pre></td></tr></table></figure></li><li><p>Host</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>Method</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>Path</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>Query</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>ReadBodyPredicateFactory</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>RemoteAddr</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>Weight</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>CloudFoundryRouteService</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="过滤器-Filter"><a href="#过滤器-Filter" class="headerlink" title="过滤器 Filter"></a>过滤器 Filter</h1><h3 id="单一过滤器"><a href="#单一过滤器" class="headerlink" title="单一过滤器"></a>单一过滤器</h3><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#gatewayfilter-factories</a></p><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><h3 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h3><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><ol><li>实现接口GlobalFilter,Ordered</li><li>能干嘛<ol><li>全局日志记录</li><li>统一网关鉴权</li></ol></li><li>案例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断有没有 uname 这个参数</span></span><br><span class="line">        log.info(<span class="string">"自定义全局日志过滤器"</span>);</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">"uname"</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname==<span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">"用户名非法"</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *     int HIGHEST_PRECEDENCE = -2147483648;</span></span><br><span class="line"><span class="comment">            int LOWEST_PRECEDENCE = 2147483647;</span></span><br><span class="line"><span class="comment">            * 加载过滤器顺序</span></span><br><span class="line"><span class="comment">            * 数字越小优先级越高</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h3 id=&quot;官网&quot;&gt;&lt;a href=&quot;#官网&quot; class=&quot;headerlink&quot; title=&quot;官网&quot;&gt;&lt;/a&gt;官网&lt;/h3&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>10-Config</title>
    <link href="http://yoursite.com/2020/08/13/10-Config/"/>
    <id>http://yoursite.com/2020/08/13/10-Config/</id>
    <published>2020-08-13T08:37:40.000Z</published>
    <updated>2020-08-13T08:42:54.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol><li>分布式系统面临的配置问题<br>每建一个微服务都需要一次配置，例如10个微服务访问相同的数据库，如果数据库名更改了，要改十次。</li><li>是什么<br>SpringCloud Config 为微服务架构中的微服务提供几种化的外部配置支持，将不同微服务应用提供一个中心化外部配置。</li><li>怎么用<br>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器 并为客户端提供配置信息。加密解密信息接口。<br>客户端则是通过指定的配置中心来管理应用资源。并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息。这样有助于对环境配置进行版本管理，并且可以通过git客户端方便管理和配置服务内容。<br>将配置信息以REST接口的形式暴露。通过 post curl 刷新</li><li>与 github整合<h1 id="服务端配置与整合"><a href="#服务端配置与整合" class="headerlink" title="服务端配置与整合"></a>服务端配置与整合</h1><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3></li><li>新建仓库springcloud-config</li><li>获取新建的地址<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:OT-mt/springcloud-config.git</li><li>本地硬盘目录新建 git仓库并clone<h3 id="建模块"><a href="#建模块" class="headerlink" title="建模块"></a>建模块</h3></li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-config-center</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line">          <span class="comment">#uri: git@github.com:EiletXie/config-repo.git #Github上的git仓库名字</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/OT-mt/springcloud-config.git</span></span><br><span class="line">          <span class="comment">##搜索目录.这个目录指的是github上的目录</span></span><br><span class="line"><span class="attr">          search-paths:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">##读取分支</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br></pre></td></tr></table></figure></li><li><p>测试<br><a href="http://localhost:3344/springcloud-config/blob/master/config-prod.yml" target="_blank" rel="noopener">http://localhost:3344/springcloud-config/blob/master/config-prod.yml</a></p><h1 id="客户端配置与测试"><a href="#客户端配置与测试" class="headerlink" title="客户端配置与测试"></a>客户端配置与测试</h1></li><li>建 mouble<br>cloud-config-client3355</li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意与上述不同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">```</span></span><br><span class="line"><span class="number">4.</span> <span class="string">主启动</span></span><br><span class="line"><span class="comment"># 客户端动态刷新</span></span><br><span class="line"><span class="number">1.</span> <span class="string">避免每次更新配置都要更新客户端</span></span><br><span class="line"><span class="number">2.</span> <span class="string">步骤</span></span><br><span class="line">  <span class="number">1.</span> <span class="string">添加</span> <span class="string">actuator</span> <span class="string">依赖</span></span><br><span class="line">  <span class="number">2.</span> <span class="string">修改yml暴露端口</span></span><br><span class="line">  <span class="number">3.</span> <span class="string">@RefreshScope业务类controller修饰</span></span><br><span class="line">  <span class="number">4.</span> <span class="string">刷新</span></span><br></pre></td></tr></table></figure><p> curl -X POST “<a href="http://localhost:3355/actuator/refresh&quot;" target="_blank" rel="noopener">http://localhost:3355/actuator/refresh&quot;</a><br> <code>`</code></p><ol start="5"><li>测试</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;分布式系统面临的配置问题&lt;br&gt;每建一个微服务都需要一次配置，例如10个微服务访问相同的数据库，如果数据库名更改了，要改十次。&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>11-Bus</title>
    <link href="http://yoursite.com/2020/08/13/11-Bus/"/>
    <id>http://yoursite.com/2020/08/13/11-Bus/</id>
    <published>2020-08-13T08:37:26.000Z</published>
    <updated>2020-08-13T08:43:10.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>Spring Cloud Bus将分布式系统的节点与轻量级消息代理链接</p><h3 id="干什么"><a href="#干什么" class="headerlink" title="干什么"></a>干什么</h3><p>这可以用于广播状态更改（例如配置更改）或其他管理指令。一个关键的想法是，Bus就像一个扩展的Spring Boot应用程序的分布式执行器，但也可以用作应用程序之间的通信渠道。当前唯一的实现是使用AMQP代理作为传输，但是相同的基本功能集（还有一些取决于传输）在其他传输的路线图上。</p><h3 id="官网资料"><a href="#官网资料" class="headerlink" title="官网资料"></a>官网资料</h3><p><a href="https://www.springcloud.cc/spring-cloud-bus.html" target="_blank" rel="noopener">https://www.springcloud.cc/spring-cloud-bus.html</a></p><h1 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h1><ol><li>下载 ErLang<br><a href="https://www.erlang.org/downloads" target="_blank" rel="noopener">https://www.erlang.org/downloads</a><br>按照默认安装即可</li><li>下载RabbitMQ：<a href="https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.7/rabbitmq-server-3.7.7.exe" target="_blank" rel="noopener">https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.7/rabbitmq-server-3.7.7.exe</a><br>按默认安装</li><li>进入sbin目录输入命令：rabbitmq-plugins enable rabbitmq_management 进行安装</li><li>查看是否安装成功：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></li><li>登录 guest guest<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-server -detached 后台启动</span><br><span class="line"></span><br><span class="line">Rabbitmq-server 直接启动，如果你关闭窗口或者需要在改窗口使用其他命令时应用就会停止</span><br><span class="line"></span><br><span class="line"> 关闭:rabbitmqctl stop</span><br></pre></td></tr></table></figure></li></ol><h1 id="全局广播"><a href="#全局广播" class="headerlink" title="全局广播"></a>全局广播</h1><h3 id="新建项目-cloud-config-client3366，与3355一样"><a href="#新建项目-cloud-config-client3366，与3355一样" class="headerlink" title="新建项目 cloud-config-client3366，与3355一样"></a>新建项目 cloud-config-client3366，与3355一样</h3><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ol><li>利用消息总线触发一个客户端/bus/refresh从而刷新所有客户端配置</li><li>利用消息总线触发一个服务端 ConfigServer 的/bus/refresh端点从而刷新所有客户端</li><li>明显二更合适<ol><li>打破了微服务职责单一性</li><li>破坏了微服务各节点的对等性</li><li>有一定局限性 ，微服务歉意时网络地址常常发生变化<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h6 id="给cloud-config-center3344-配置中心提供消息总线支持"><a href="#给cloud-config-center3344-配置中心提供消息总线支持" class="headerlink" title="给cloud-config-center3344 配置中心提供消息总线支持"></a>给cloud-config-center3344 配置中心提供消息总线支持</h6></li></ol></li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加消息总线RabbitMQ支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rabbitmq配置</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">guest</span></span><br><span class="line"><span class="comment">#暴露bus刷新配置端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'bus-refresh'</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="给cloud-config-client3355客户端提供消息总线支持"><a href="#给cloud-config-client3355客户端提供消息总线支持" class="headerlink" title="给cloud-config-client3355客户端提供消息总线支持"></a>给cloud-config-client3355客户端提供消息总线支持</h6><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加消息总线RabbitMQ支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:3344</span></span><br><span class="line">  <span class="comment">#rabbitmq配置,注意与服务端不同这个在spring下面</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure></li></ol><h6 id="给cloud-config-client3366客户端提供消息总线支持"><a href="#给cloud-config-client3366客户端提供消息总线支持" class="headerlink" title="给cloud-config-client3366客户端提供消息总线支持"></a>给cloud-config-client3366客户端提供消息总线支持</h6><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><ol><li>改变github内容</li><li>发送post请求： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</span><br></pre></td></tr></table></figure></li></ol><h6 id="动态刷新定点通知"><a href="#动态刷新定点通知" class="headerlink" title="动态刷新定点通知"></a>动态刷新定点通知</h6><ol><li>使用<br> curl -X POST “<a href="http://localhost:配置中心端口号/actuator/bus-refresh/{destination}&quot;" target="_blank" rel="noopener">http://localhost:配置中心端口号/actuator/bus-refresh/{destination}&quot;</a></li><li>本例中<br> curl -X POST “<a href="http://localhost:3344/actuator/bus-refresh/cloud-client:3355&quot;" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh/cloud-client:3355&quot;</a><br> 代表只通知3355</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>12-Stream</title>
    <link href="http://yoursite.com/2020/08/13/12-Stream/"/>
    <id>http://yoursite.com/2020/08/13/12-Stream/</id>
    <published>2020-08-13T08:36:47.000Z</published>
    <updated>2020-08-13T08:43:21.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://spring.io/projects/spring-cloud-stream" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-stream</a></p><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Spring Cloud Stream是一个框架，用于构建与共享消息传递系统连接的高度可扩展的事件驱动型微服务。</p><p>应用程序通过 inputs 和 outputs 来与 Spring Cloud Stream 中的 binder 对象交互。而 Spring Cloud Stream 的 binder 对象负责与消息中间件交互。</p><p>==目前仅支持 RabbitMQ,Kafaka==</p><h3 id="解决了什么"><a href="#解决了什么" class="headerlink" title="解决了什么"></a>解决了什么</h3><p>一个系统中采用多个消息中间件，解决不同消息中间件之间通信的问题。</p><h3 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h3><h6 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h6><ol><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka<h6 id="标准MQ"><a href="#标准MQ" class="headerlink" title="标准MQ"></a>标准MQ</h6></li><li>生产者和消费者之间靠消息媒介传递消息内容？Message</li><li>消息必须走特定通道？MessageChannel</li><li>消息通道里的消息如何被消费？<br>消息通道MessageChannel的子接口SubscribableChanner，由MessageHandler消息处理器所订阅<h6 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h6></li><li>@Input<br>注解标识输入通道</li><li>@Output<br>注解标识输出通道</li><li>@StreamListener<br>监听队列，用于消费者的队列的消息接收</li><li>@EnableBinding<br>channel和exchange绑定在一起<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h3 id="模块-cloud-stream-rabbitmq-provider8801"><a href="#模块-cloud-stream-rabbitmq-provider8801" class="headerlink" title="模块 cloud-stream-rabbitmq-provider8801"></a>模块 cloud-stream-rabbitmq-provider8801</h3></li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    stream:</span></span><br><span class="line"><span class="attr">      binders:</span> <span class="comment">#在此配置要绑定的 rabbitmq的服务信息</span></span><br><span class="line"><span class="attr">        defaultRabbit:</span>  <span class="comment"># 表示定义的名称，用于 binding整合</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">rabbit</span>  <span class="comment"># 消息组件类型</span></span><br><span class="line"><span class="attr">          environment:</span>  <span class="comment"># 设置rabbitmq相关的环境配置</span></span><br><span class="line"><span class="attr">            spring:</span></span><br><span class="line"><span class="attr">              rabbitmq:</span></span><br><span class="line"><span class="attr">                host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">                port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">                username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">                password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">      bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line"><span class="attr">        output:</span> <span class="comment"># 输出通道的名称</span></span><br><span class="line"><span class="attr">          destination:</span> <span class="string">studyExchange</span>  <span class="comment">#表示要使用的 Exchange 名称定义</span></span><br><span class="line"><span class="attr">          content-type:</span> <span class="string">application/json</span>  <span class="comment"># 消息类型</span></span><br><span class="line"><span class="attr">          binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳时间间隔默认30s</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果超过了5秒的间隔默认90s</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">send-8001.com</span>  <span class="comment">#信息列表显示主机名称</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 访问路径变为ip地址</span></span><br></pre></td></tr></table></figure></li><li><p>main</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding</span>(Source.class)<span class="comment">//定义消息推送管道</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;<span class="comment">//消息发送通道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        log.info(serial+<span class="string">"***********************"</span>);</span><br><span class="line">        <span class="keyword">return</span> serial;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider provider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/sendMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> provider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><ol><li>进入rabbitmq 查看Exchanges中有没有studyExchange对应 yml中的自定义名字</li><li>多次访问<a href="http://localhost:8801/sendMessage" target="_blank" rel="noopener">http://localhost:8801/sendMessage</a></li><li>查看rabbitmq 中overview中 Message rates 的折线变化<h3 id="消费者模块-cloud-stream-rabbitmq-consumer8802"><a href="#消费者模块-cloud-stream-rabbitmq-consumer8802" class="headerlink" title="消费者模块 cloud-stream-rabbitmq-consumer8802"></a>消费者模块 cloud-stream-rabbitmq-consumer8802</h3></li></ol></li><li>pom<br>同8801一样</li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    stream:</span></span><br><span class="line"><span class="attr">      binders:</span> <span class="comment">#在此配置要绑定的 rabbitmq的服务信息</span></span><br><span class="line"><span class="attr">        defaultRabbit:</span>  <span class="comment"># 表示定义的名称，用于 binding整合</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">rabbit</span>  <span class="comment"># 消息组件类型</span></span><br><span class="line"><span class="attr">          environment:</span>  <span class="comment"># 设置rabbitmq相关的环境配置</span></span><br><span class="line"><span class="attr">            spring:</span></span><br><span class="line"><span class="attr">              rabbitmq:</span></span><br><span class="line"><span class="attr">                host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">                port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">                username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">                password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">      bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line"><span class="attr">        input:</span> <span class="comment"># 输出通道的名称</span></span><br><span class="line"><span class="attr">          destination:</span> <span class="string">studyExchange</span>  <span class="comment">#表示要使用的 Exchange 名称定义</span></span><br><span class="line"><span class="attr">          content-type:</span> <span class="string">application/json</span>  <span class="comment"># 消息类型</span></span><br><span class="line"><span class="attr">          binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:7001/eureka</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳时间间隔默认30s</span></span><br><span class="line"><span class="attr">    lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果超过了5秒的间隔默认90s</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">receive-8002.com</span>  <span class="comment">#信息列表显示主机名称</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 访问路径变为ip地址</span></span><br></pre></td></tr></table></figure></li><li><p>main<br>@SpringBootApplication</p></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt;message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"消费者1号接收到消息"</span>+message.getPayload()+<span class="string">"\t port:"</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><ol><li>依次启动7001，8801,8802</li><li>访问<a href="http://localhost:8801/sendMessage" target="_blank" rel="noopener">http://localhost:8801/sendMessage</a></li><li>查看8801控制台是否有输出<h3 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h3></li></ol></li><li>新建8803，同8802一样</li><li>访问<a href="http://localhost:8801/sendMessage" target="_blank" rel="noopener">http://localhost:8801/sendMessage</a></li><li>8802与8803都可以访问消息</li></ol><h1 id="消息分组与持久化"><a href="#消息分组与持久化" class="headerlink" title="消息分组与持久化"></a>消息分组与持久化</h1><h3 id="消息分组"><a href="#消息分组" class="headerlink" title="消息分组"></a>消息分组</h3><ol><li>将两个微服务分到一个组group中，保证消息只能被一个组中的一个应用消费一次，不同的组可以同时消费</li><li>配置8802与8803的yml如下<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    stream:</span></span><br><span class="line"><span class="attr">      binders:</span> <span class="comment">#在此配置要绑定的 rabbitmq的服务信息</span></span><br><span class="line"><span class="attr">      bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line"><span class="attr">        input:</span> <span class="comment"># 输出通道的名称</span></span><br><span class="line"><span class="attr">          group:</span> <span class="string">group1</span> <span class="comment"># 将 8802与8803分为同一组，这样消息只有一个可以消费</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ol><li>停掉8802,8803</li><li>使用8801发送消息</li><li>删除8803的分组 group </li><li>启动8803与8802</li><li>发现8802可以接受到关闭时发送的消息，而8803不能</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;官网&quot;&gt;&lt;a href=&quot;#官网&quot; class=&quot;headerlink&quot; title=&quot;官网&quot;&gt;&lt;/a&gt;官网&lt;/h3&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>13-Sleuth</title>
    <link href="http://yoursite.com/2020/08/13/13-Sleuth/"/>
    <id>http://yoursite.com/2020/08/13/13-Sleuth/</id>
    <published>2020-08-13T08:35:18.000Z</published>
    <updated>2020-08-13T08:43:32.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://spring.io/projects/spring-cloud-sleuth" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-sleuth</a></p><h3 id="监控链路调用"><a href="#监控链路调用" class="headerlink" title="监控链路调用"></a>监控链路调用</h3><p>这包括将跟踪数据（跨度）报告到的位置，要保留（跟踪）多少个跟踪，是否发送了远程字段（行李）以及要跟踪哪些库。微服务中节点过多，使用它能更好的做监控。</p><h3 id="安装Zipkin"><a href="#安装Zipkin" class="headerlink" title="安装Zipkin"></a>安装Zipkin</h3><ol><li><p>Sleuth 负责链路监控，Zipkin负责展现</p></li><li><p><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/" target="_blank" rel="noopener">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p></li><li><p>下载 exec.jar</p></li><li><p>使用<br>命令行打开到jar包所在目录<br>java -jar zipkin-server-2.12.9-exec.jar<br>成功后访问<a href="http://localhost:9411/" target="_blank" rel="noopener">http://localhost:9411/</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="改变最原始的模块80与8001"><a href="#改变最原始的模块80与8001" class="headerlink" title="改变最原始的模块80与8001"></a>改变最原始的模块80与8001</h3></li><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line">    <span class="comment"># 放到 zipkin上</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    sampler:</span></span><br><span class="line">      <span class="comment"># 采样率介于0-1之间，1表示全部采集</span></span><br><span class="line"><span class="attr">      probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>controller 80</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/consumer/payment/zipkin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String result = restTemplate.getForObject(PAYMENT_URL+<span class="string">"/payment/zipkin"</span>,String.class);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller 8001</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/payment/zipkin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"我是 zipkin"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试<br>依次打开7001,8001,80<br>访问80<br>访问<a href="http://localhost:9411/可以查看到访问的链路" target="_blank" rel="noopener">http://localhost:9411/可以查看到访问的链路</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;官网&quot;&gt;&lt;a href=&quot;#官网&quot; class=&quot;headerlink&quot; title=&quot;官网&quot;&gt;&lt;/a&gt;官网&lt;/h3&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>14-Springcloud-Alibaba简介</title>
    <link href="http://yoursite.com/2020/08/13/14-Springcloud-Alibaba%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2020/08/13/14-Springcloud-Alibaba简介/</id>
    <published>2020-08-13T08:35:05.000Z</published>
    <updated>2020-08-13T08:43:42.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h1><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><h1 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h1><h3 id="服务限流降级："><a href="#服务限流降级：" class="headerlink" title="服务限流降级："></a>服务限流降级：</h3><p>默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p><h3 id="服务注册与发现："><a href="#服务注册与发现：" class="headerlink" title="服务注册与发现："></a>服务注册与发现：</h3><p>适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</p><h3 id="分布式配置管理："><a href="#分布式配置管理：" class="headerlink" title="分布式配置管理："></a>分布式配置管理：</h3><p>支持分布式系统中的外部化配置，配置更改时自动刷新。</p><h3 id="消息驱动能力："><a href="#消息驱动能力：" class="headerlink" title="消息驱动能力："></a>消息驱动能力：</h3><p>基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</p><h3 id="分布式事务："><a href="#分布式事务：" class="headerlink" title="分布式事务："></a>分布式事务：</h3><p>使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。。</p><h3 id="阿里云对象存储："><a href="#阿里云对象存储：" class="headerlink" title="阿里云对象存储："></a>阿里云对象存储：</h3><p>阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p><h3 id="分布式任务调度："><a href="#分布式任务调度：" class="headerlink" title="分布式任务调度："></a>分布式任务调度：</h3><p>提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</p><h3 id="阿里云短信服务："><a href="#阿里云短信服务：" class="headerlink" title="阿里云短信服务："></a>阿里云短信服务：</h3><p>覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p><h1 id="官网学习资料"><a href="#官网学习资料" class="headerlink" title="官网学习资料"></a>官网学习资料</h1><ol><li>spring官网<br><a href="https://spring.io/projects/spring-cloud-alibaba#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-alibaba#overview</a></li><li>github<br><a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba</a></li><li>全部参考手册<br><a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html" target="_blank" rel="noopener">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什么&lt;/h1&gt;&lt;p&gt;Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>15-Ali-Nacos</title>
    <link href="http://yoursite.com/2020/08/13/15-Ali-Nacos/"/>
    <id>http://yoursite.com/2020/08/13/15-Ali-Nacos/</id>
    <published>2020-08-13T08:34:41.000Z</published>
    <updated>2020-08-13T08:43:51.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="什么是-Nacos"><a href="#什么是-Nacos" class="headerlink" title="什么是 Nacos"></a>什么是 Nacos</h3><p>Dynamic Naming and Configuration Service 动态命名和配置服务<br>Nacos = Eureka+Config+Bus 注册中心与配置中心的组合</p><h3 id="能干什么"><a href="#能干什么" class="headerlink" title="能干什么"></a>能干什么</h3><ol><li>替代Eureka做注册中心</li><li>替代Config做配置中心<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">https://github.com/alibaba/nacos</a><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><a href="https://nacos.io/en-us/" target="_blank" rel="noopener">https://nacos.io/en-us/</a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></li><li>本案例采用 1.1.4</li><li><a href="https://github.com/alibaba/nacos/releases/tag/1.1.4" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases/tag/1.1.4</a>          tar.gz是linux，zip是windows</li><li>解压 cmd 进入 bin目录下</li><li>startup.cmd 启动程序</li><li>进入 <a href="http://localhost:8848/nacos" target="_blank" rel="noopener">http://localhost:8848/nacos</a></li><li>默认账号密码都是 nacos<h1 id="作为服务注册中心"><a href="#作为服务注册中心" class="headerlink" title="作为服务注册中心"></a>作为服务注册中心</h1><h3 id="服务提供者模块"><a href="#服务提供者模块" class="headerlink" title="服务提供者模块"></a>服务提供者模块</h3></li><li>cloud-ali-provider-payment9001</li><li><p>父 pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>子 pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="attr">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span>  <span class="comment">#暴露端口</span></span><br></pre></td></tr></table></figure></li><li><p>测试<br><a href="http://localhost:9001/payment/nacos/1" target="_blank" rel="noopener">http://localhost:9001/payment/nacos/1</a><br>进入nocas查看是否配置成功</p></li><li>参照9001新建9002<h3 id="消费者模块"><a href="#消费者模块" class="headerlink" title="消费者模块"></a>消费者模块</h3>==Nacos自带Ribbon实现负载均衡，Nacos支持AP与CP的切换==</li><li>新建消费者模块</li><li>pom<br>同 9001 一样</li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">83</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="comment"># 消费者要去访问的微服务名称</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line"><span class="attr">  nacos-user-service:</span> <span class="attr">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure></li><li><p>主启动类<br>同 9001 一样</p></li><li><p>config类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>((<span class="string">"$&#123;service-url.nacos-user-service&#125;"</span>))</span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/nacos/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">"/payment/nacos/"</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试<br><a href="http://localhost:83/consumer/payment/nacos/1" target="_blank" rel="noopener">http://localhost:83/consumer/payment/nacos/1</a></p><h1 id="作为配置中心"><a href="#作为配置中心" class="headerlink" title="作为配置中心"></a>作为配置中心</h1><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3></li><li>建模块cloud-ali-config-nacos-client3377</li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml：有application与bootstrap<br>application</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br></pre></td></tr></table></figure></li></ol><p>bootstrap<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span> <span class="comment"># 服务注册中心</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span> <span class="comment"># 服务注册中心</span></span><br><span class="line"><span class="attr">        file-extension:</span> <span class="string">yaml</span> <span class="comment"># 指定yaml格式的配置</span></span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 动态刷新</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"/config.info"</span>)</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/config/info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置dataid<br> <code>${prefix}-${spring.profile.active}.${file-extension}</code></p><ul><li>prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。</li><li>spring.profile.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</li><li>file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</li><li><p>得到 data id为</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br><span class="line">$&#123;spring-application-name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置 yaml 文件<br><img src="imgs/nacos-config1.png"><br><img src="imgs/nacos-config1.png"></p></li><li>测试访问<a href="http://localhost:3377/config/info看是否得到配置信息" target="_blank" rel="noopener">http://localhost:3377/config/info看是否得到配置信息</a></li><li>更改nacos中内容查看3377中是否变化</li></ul></li></ol><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p><img src="imgs/nacos命名空间.png"><br><img src="imgs/nacos分组.png"></p><ol><li><p>Nacos默认的命名空间是 public ，Namespace主要实现隔离。<br>比如说现在有三个环境：开发，测试，生产环境，就可以创建三个Namespace，不同的Namespace之间是隔离的。</p></li><li><p>Group默认是 DEFAULT_GROUP，Group 可以把不同的微服务划分到一个组里去。</p></li><li>service就是微服务，一个微服务可以包含多个 Cluster （集群）</li><li>Instance就是微服务的实例<h3 id="三种方案加载配置"><a href="#三种方案加载配置" class="headerlink" title="三种方案加载配置"></a>三种方案加载配置</h3><h6 id="DataID"><a href="#DataID" class="headerlink" title="DataID"></a>DataID</h6>指定 spring.profile.active 与配置文件的DataID来使不同环境下读取不同的配置<br>默认空难攻坚+默认分组+新建dev和test两个DataID</li><li>Nacos配置中心新建nacos-config-client-test.yaml</li><li>将spring中的配置spring.profile.active改成test，就会加载Nacos中新建的yaml<h6 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h6></li><li>Nacos中新建配置 nacos-config-client-info.yaml ,分组为 DEV_GROUP</li><li>Nacos中新建配置 nacos-config-client-info.yaml ,分组为 TEST_GROUP</li><li>将 spring.profile.active改成 info </li><li>增加配置 spring.cloud.nacos.config.group 指定组名，选择调用哪个组的文件</li><li>测试：<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a><h6 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h6></li><li>找到左侧命名空间，新建test与dev命名空间</li><li>dev 命名空间新建 nacos-config-client-dev.yaml 分组为 DEV_GROUP</li><li><p>yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      config:</span></span><br><span class="line">      <span class="comment"># 这个为命名空间的流水号</span></span><br><span class="line"><span class="attr">        namespace:</span> <span class="number">625e1</span><span class="string">f16-7820-412f-84d0-890d0092577a</span></span><br><span class="line"><span class="attr">        group:</span> <span class="string">DEV_GROUP</span></span><br></pre></td></tr></table></figure></li><li><p>测试：<a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a></p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>如同包一样 Namespace&gt;Group&gt;DataID</p></li></ol><h1 id="Nacos集群与持久化配置（重要）"><a href="#Nacos集群与持久化配置（重要）" class="headerlink" title="Nacos集群与持久化配置（重要）"></a>Nacos集群与持久化配置（重要）</h1><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>如果Nacos挂掉怎么办</li><li>Nacos停机了，但是有些数据仍需要保留<h3 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h3><h6 id="Nacos支持三种部署模式"><a href="#Nacos支持三种部署模式" class="headerlink" title="Nacos支持三种部署模式"></a>Nacos支持三种部署模式</h6></li><li>单机模式</li><li>集群模式-用于生产环境</li><li>多集群模式-用于多数据中心场景<br>默认Nacos使用嵌入式数据库derby来实现数据的存储。但是如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。为了解决这个问题，Nacos采用集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。<h6 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h6></li><li>64 bit OS Linux/Unix/Mac，推荐使用Linux系统。</li><li>64 bit JDK 1.8+；下载.配置。</li><li>Maven 3.2.x+；下载.配置。</li><li>3个或3个以上Nacos节点才能构成集群。</li></ol><h6 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h6><ol><li>安装数据库，版本要求：5.6.5+</li><li>初始化mysql数据库，数据库初始化文件：nacos\conf\nacos-mysql.sql</li><li><p>修改nacos\conf\application.properties文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true # 更改数据库名,更改127.0.0.1</span><br><span class="line">db.user=nacos_devtest   #更改用户名</span><br><span class="line">db.password=youdontknow #更改密码</span><br></pre></td></tr></table></figure></li><li><p>重启Nacos</p></li><li>观察到之前写过的配置全部消失，因为切换了数据库<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><img src="imgs/nacos集群.jpeg"> </li></ol><h6 id="前提配置"><a href="#前提配置" class="headerlink" title="前提配置"></a>前提配置</h6><p>1个Nginx+3个nacos注册中心+1个mysql</p><h6 id="下载linux版"><a href="#下载linux版" class="headerlink" title="下载linux版"></a>下载linux版</h6><ol><li>下载：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></li><li>解压</li><li>同windows一样，需要在linux下设置mysql为nacos持久化存储<h6 id="linux安装mysql"><a href="#linux安装mysql" class="headerlink" title="linux安装mysql"></a>linux安装mysql</h6></li><li>下载：<code>wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</code></li><li>将安装包放到指定目录下，解压tar xzvf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</li><li>移动到 /usr/local目录下<br><a href="https://blog.csdn.net/dc282614966/article/details/81098074" target="_blank" rel="noopener">https://blog.csdn.net/dc282614966/article/details/81098074</a></li></ol><h6 id="创建-nacos-数据库"><a href="#创建-nacos-数据库" class="headerlink" title="创建 nacos 数据库"></a>创建 nacos 数据库</h6><ol><li>source /usr/local/nacos/conf/nacos-mysql.sql</li><li>修改nacos\conf\application.properties文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true # 更改数据库名,更改127.0.0.1</span><br><span class="line">db.user=nacos_devtest   #更改用户名</span><br><span class="line">db.password=youdontknow #更改密码</span><br></pre></td></tr></table></figure></li></ol><h6 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h6><ol><li>复制nacos/config下的 cluster.config.example 重命名为 cluster.config</li><li><p>修改文件内容,ip地址查看 id addr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.150.66:3333</span><br><span class="line">192.168.150.66:4444</span><br><span class="line">192.168.150.66:5555</span><br></pre></td></tr></table></figure></li><li><p>配置 bin 下的 startup.sh,109集</p></li><li>安装Nginx<br><a href="https://blog.csdn.net/t8116189520/article/details/81909574" target="_blank" rel="noopener">https://blog.csdn.net/t8116189520/article/details/81909574</a><br>命令： cd /usr/local/nginx/sbin</li></ol><p>启动，关闭，重启，命令：</p><p>./nginx 启动</p><p>./nginx -s stop 关闭</p><p>./nginx -s reload 重启</p><ol start="5"><li>配置nginx<br><a href="https://www.cnblogs.com/linchenguang/p/12827582.html" target="_blank" rel="noopener">https://www.cnblogs.com/linchenguang/p/12827582.html</a></li><li>注意<ol><li>关闭防火墙</li><li>打开mysql服务</li><li>有错误要去nacos的log文件夹内查询</li><li>不要将安装包在windows下载后直接拖到linux</li></ol></li><li>测试<br>将idea对应端口换成 nginx 地址即可：192.168.150.66:1111</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;什么是-Nacos&quot;&gt;&lt;a href=&quot;#什么是-Nacos&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nac
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>16-Ali-Sentinel</title>
    <link href="http://yoursite.com/2020/08/13/16-Ali-Sentinel/"/>
    <id>http://yoursite.com/2020/08/13/16-Ali-Sentinel/</id>
    <published>2020-08-13T08:34:18.000Z</published>
    <updated>2020-08-13T08:44:01.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E9%A1%B5" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E9%A1%B5</a></p><h3 id="与Hystrix区别"><a href="#与Hystrix区别" class="headerlink" title="与Hystrix区别"></a>与Hystrix区别</h3><h6 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h6><ol><li>需要自己搭建监控平台。</li><li>没有一套web界面可以进行更加细粒度的配置，流控，速率控制，服务熔断，服务降级。<h6 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h6></li><li>单独一个组件，可以独立出来</li><li>页面化的细粒度统一配置<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。<h3 id="能干什么"><a href="#能干什么" class="headerlink" title="能干什么"></a>能干什么</h3></li><li>流量控制</li><li>熔断降级</li><li>系统自适应保护<h1 id="Sentinel-控制台"><a href="#Sentinel-控制台" class="headerlink" title="Sentinel 控制台"></a>Sentinel 控制台</h1><h3 id="组件由两部分组成"><a href="#组件由两部分组成" class="headerlink" title="组件由两部分组成"></a>组件由两部分组成</h3></li><li>核心库，jar包，不依赖任何框架，能够运行于所有Java运行的环境。</li><li>控制台，基于springboot开发，打包后直接运行，不需要额外的tomcat。<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3></li><li><a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a><br>选择sentinel-dashboard-1.7.2.jar</li><li>命令行切换到jar包目录</li><li><code>java -jar sentinel-dashboard-1.7.2.jar</code></li><li><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></li><li>账号密码 sentinel</li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h3 id="建模块cloud-alibaba-sentinel-service8401"><a href="#建模块cloud-alibaba-sentinel-service8401" class="headerlink" title="建模块cloud-alibaba-sentinel-service8401"></a>建模块cloud-alibaba-sentinel-service8401</h3><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后续做持久化用到 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">cloud-alibaba-sentinel-service</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册中心地址</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">    sentinel:</span></span><br><span class="line"><span class="attr">      transport:</span></span><br><span class="line">        <span class="comment"># 配置sentinel dashboard地址</span></span><br><span class="line"><span class="attr">        dashboard:</span> <span class="attr">localhost:8080</span></span><br><span class="line">        <span class="comment"># 默认 8719端口，假如被占用从8719开始+1扫描直到直到未被占用的端口</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure></li><li><p>main<br>@SpringBootApplication<br>@EnableDiscoveryClient</p></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testA"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"testA"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testB"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"testB"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>启动 nacos，sentinel，启动模块</p></li><li>访问模块，观察 sentinel里变化<h1 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3></li><li>资源名：唯一名称，默认请求路径</li><li>针对来源：Sentinel可以针对调用者进行限流 ，填写微服务名，默认 default</li><li>阈值类型<ul><li>QPS（每秒请求数量）：当调用api的QPS达到阈值后进行限流</li><li>线程数：调用该api的线程数达到阈值后进行限流</li></ul></li><li>是否集群：不需要集群</li><li>流控模式：<ul><li>直接：api达到限流条件时直接限流</li><li>关联：当关联的资源达到阈值时就限流自己</li><li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值就进行限流）</li></ul></li><li>流控效果<ul><li>快速失败：直接失败，抛异常</li><li>Warm Up：根据codeFactor（冷加热因子，默认3）的值，从阈值 codeFactor，经过预热时长，才达到设定的QPS阈值。<h3 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h3><img src="imgs/sentinel1.png"></li></ul></li></ol><h6 id="直接"><a href="#直接" class="headerlink" title="直接"></a>直接</h6><ol><li>按上图设置QPS为1，然后访问 testA 观察效果</li><li>达到阈值快速失败</li><li>自定义报错信息<h6 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h6></li><li>关联 testA 与 testB</li><li>B达到阈值，限流A</li><li>使用 postman 模拟并发请求<br> <img src="imgs/postman1.png"><br> <img src="imgs/postman2.png"><ol><li>先访问testB</li><li>save到新建collection里</li><li>选择runner，选择testB，选择迭代次数和等待时长</li></ol></li><li>启动postman，再访问testA查看效果<h6 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h6></li><li><p>两个入口a，b调用同一个资源，只记录a上的限流，而不关系心b的使用</p><h3 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h3><h6 id="直接快速失败（默认）"><a href="#直接快速失败（默认）" class="headerlink" title="直接快速失败（默认）"></a>直接快速失败（默认）</h6><h6 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h6><p><img src="imgs/sentinel2.png"></p></li><li><p>初始QPS = QPS/3</p></li><li>阈值从初始QPS主键增加到 QPS</li><li>访问 testB 观察随时间变化错误的数量变化<h6 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h6><img src="imgs/排队等待1.png"><br><img src="imgs/排队等待2.png"></li></ol><p>为 testB 设置打印当前时间<br>可以观察到一秒一个挨个执行<br>即请求按照顺序依次执行</p><h1 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h1><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p> 熔断降级会在调用链路中某个资源出现不稳定状态时（例如调用超时或异常比例升高），对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联错误。<br> ==没有半开状态==</p><h3 id="触发降级的标准"><a href="#触发降级的标准" class="headerlink" title="触发降级的标准"></a>触发降级的标准</h3><ol><li>平均响应时间 (DEGRADE_GRADE_RT)：当 1s 内持续进入 N 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。注意 Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt=xxx 来配置。</li><li>异常比例 (DEGRADE_GRADE_EXCEPTION_RATIO)：当资源的每秒请求量 &gt;= N（可配置），并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态，即在接下的时间窗口（DegradeRule 中的 timeWindow，以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</li><li><p>异常数 (DEGRADE_GRADE_EXCEPTION_COUNT)：当资源近 1 分钟的异常数目超过阈值之后会进行熔断。注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</p><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><h6 id="平均响应时间"><a href="#平均响应时间" class="headerlink" title="平均响应时间"></a>平均响应时间</h6><p><img src="imgs/服务降级.png"></p></li><li><p>jmeter压力测试每秒10次，永远循环</p></li><li>如何 1s 内持续进了 N 个请求且 平均响应时间均超过阈值，那么下一个窗口期服务熔断</li><li>该例中设置个请求 sleep 1s 所以，jmeter 每秒 10次（访问总次数）超过 n=5（默认是5），在下一个时间窗口期内服务熔断<h6 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h6></li><li>默认请求量大于5时</li><li>异常比例占通过总量和的比例超过阈值时</li><li>进入降级状态，且下一个时间窗口期对这个方法调用自动返回<h6 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h6></li><li>==将窗口期超过 60s==</li><li>模拟异常 10/0</li><li>jmeter压测</li><li>进入熔断异常</li><li>过了时间窗口期，之间不要做任何操作，即可访问</li></ol><h1 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h1><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>即经常访问的数据</p><ul><li>商品id为参数，统计一段时间最常购买的商品 id 并进行限制。</li><li>用户id为参数，针对一段时间内频繁访问的用户 id 进行限制。<h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3></li></ul><ol><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testHotKey"</span>)</span><br><span class="line"><span class="comment">// 名字可以随意起，但为唯一标识</span></span><br><span class="line"><span class="meta">@SentinelResource</span>(value = <span class="string">"testHotKey"</span>,blockHandler = <span class="string">"deal_testHotKey"</span>)</span><br><span class="line"><span class="comment">// required 表示是否必须包含此参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHostKey</span><span class="params">(@RequestParam(value = <span class="string">"p1"</span>,required = <span class="keyword">false</span>)</span> String p1,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"p2"</span>,required = <span class="keyword">false</span>)</span>String p2)</span>&#123;</span><br><span class="line">    System.out.println(p1);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"testHostKey"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span><span class="params">(String p1, String p2, BlockException exception)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"deal_testHotKey"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><img src="imgs/hotkey1.png"></p></li><li>多次访问 <a href="http://localhost:8401/testHotKey?p1=a" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=a</a> 查看效果,可以生效</li><li>多次访问 <a href="http://localhost:8401/testHotKey?p1=a&amp;p2=b" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p1=a&amp;p2=b</a> 查看效果,可以生效</li><li>多次访问 <a href="http://localhost:8401/testHotKey?p2=a" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p2=a</a> 查看效果,不能生效</li><li>多次访问 <a href="http://localhost:8401/testHotKey?p2=b&amp;p1=a" target="_blank" rel="noopener">http://localhost:8401/testHotKey?p2=b&amp;p1=a</a> 查看效果,可以生效</li><li><p>总结上图的参数索引0，对应Java代码参数列表里的参数下标</p><h3 id="参数特殊项"><a href="#参数特殊项" class="headerlink" title="参数特殊项"></a>参数特殊项</h3><p><img src="imgs/特殊参数项.png"></p></li><li><p>当参数为特定值的时候拥有不同的阈值</p></li><li>即使其他参数项熔断，特定参数项也不会熔断</li></ol><h1 id="系统自适应限流"><a href="#系统自适应限流" class="headerlink" title="系统自适应限流"></a>系统自适应限流</h1><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><h6 id="系统保护的目的"><a href="#系统保护的目的" class="headerlink" title="系统保护的目的"></a>系统保护的目的</h6><ol><li>保证系统不被拖垮</li><li>在系统稳定的前提下，保持系统吞吐量<h6 id="系统保护的问题"><a href="#系统保护的问题" class="headerlink" title="系统保护的问题"></a>系统保护的问题</h6>长期以来系统保护是根据负载来做系统过载保护。当负载超过某个阈值，就禁止或减少流量进入，负载好转后恢复流量进入。</li><li>如果根据当前负载的情况调节流量通过率，始终有延迟。这样会浪费系统处理能力。所以看到的曲线总会有所抖动。</li><li>恢复慢，下游应用不可靠导致应用 RT 很好，从而负载很高，但过了一段时间下游恢复了，其实应该大幅增加流量通过率。但这时候load仍然很高。通过率恢复仍然不高。<br>==最终目的：在系统不被拖垮的情况下，提高系统的吞吐率，而不是 load 一定要到低于某个阈值==<h6 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h6>从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。<h6 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h6></li><li>Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps <em> minRt 估算得出。设定参考值一般是 CPU cores </em> 2.5。</li><li>CPU usage（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li><li>平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li></ol><h6 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h6><p><img src="imgs/系统规则.png"></p><p>==简而言之就是对整个系统添加限流，不推荐使用==</p><h1 id="SentinelResource-配置兜底方法的两种实现"><a href="#SentinelResource-配置兜底方法的两种实现" class="headerlink" title="SentinelResource 配置兜底方法的两种实现"></a>SentinelResource 配置兜底方法的两种实现</h1><h3 id="自定义方法"><a href="#自定义方法" class="headerlink" title="自定义方法"></a>自定义方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/A"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"A"</span>,blockHandler = <span class="string">"exceptionA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"a"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">exceptionA</span><span class="params">(BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"exceptionA"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义异常处理类"><a href="#自定义异常处理类" class="headerlink" title="自定义异常处理类"></a>自定义异常处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/B"</span>)</span><br><span class="line"><span class="meta">@SentinelResource</span>(value = <span class="string">"B"</span>,blockHandlerClass = ExceptionHandler.class,blockHandler = <span class="string">"handler1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">B</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"B"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常处理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">handler1</span><span class="params">(BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hanlder1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">handler2</span><span class="params">(BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hanlder2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="服务熔断Ribbon"><a href="#服务熔断Ribbon" class="headerlink" title="服务熔断Ribbon"></a>服务熔断Ribbon</h1><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h6 id="提供者模块-cloud-ali-provider-payment9003-9004"><a href="#提供者模块-cloud-ali-provider-payment9003-9004" class="headerlink" title="提供者模块 cloud-ali-provider-payment9003/9004"></a>提供者模块 cloud-ali-provider-payment9003/9004</h6><ol><li>pom<br>nacos</li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure></li><li><p>主启动<br>@SpringBootApplication<br>@EnableDiscoveryClient</p></li><li>业务类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long,String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hashMap.put(<span class="number">1l</span>,<span class="string">"aaaaaaaaaaaaaa"</span>);</span><br><span class="line">        hashMap.put(<span class="number">2l</span>,<span class="string">"bbbbbbbbbbbbbb"</span>);</span><br><span class="line">        hashMap.put(<span class="number">3l</span>,<span class="string">"cccccccccccccc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hashMap.get(id)+serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="消费者模块-cloud-ali-consumer-nacos-order84"><a href="#消费者模块-cloud-ali-consumer-nacos-order84" class="headerlink" title="消费者模块 cloud-ali-consumer-nacos-order84"></a>消费者模块 cloud-ali-consumer-nacos-order84</h6><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">    sentinel:</span></span><br><span class="line"><span class="attr">      transport:</span></span><br><span class="line"><span class="attr">        dashboard:</span> <span class="attr">localhost:8080</span></span><br><span class="line"><span class="attr">        port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line"><span class="attr">  nacos-user-service:</span> <span class="attr">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure></li><li><p>main<br>@SpringBootApplication<br>@EnableDiscoveryClient</p></li><li>config<br>配置RestTemplate</li><li>controller<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">"http://nacos-payment-provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/fallback/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = restTemplate.getForObject(SERVICE_URL+<span class="string">"/payment/"</span>+id,String.class,id);</span><br><span class="line">        <span class="keyword">if</span> (id==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"非法参数异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h6 id="配置fallback"><a href="#配置fallback" class="headerlink" title="配置fallback"></a>配置fallback</h6><ol><li><p>改变 84 中的 controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_URL = <span class="string">"http://nacos-payment-provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/fallback/&#123;id&#125;"</span>)</span><br><span class="line"><span class="comment">//    @SentinelResource(value = "fallback")   // 没有配置</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>,fallback = <span class="string">"handlerFallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = restTemplate.getForObject(SERVICE_URL+<span class="string">"/payment/"</span>+id,String.class,id);</span><br><span class="line">        <span class="keyword">if</span> (id==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"非法参数异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handlerFallback</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id+<span class="string">"异常"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问 84 输入 id=4 模拟异常</p></li><li>有异常时进入fallback，其实就是兜底方法</li></ol><h6 id="配置-blockHanlder"><a href="#配置-blockHanlder" class="headerlink" title="配置 blockHanlder"></a>配置 blockHanlder</h6><ol><li><p>改变 84 中的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/consumer/fallback/&#123;id&#125;"</span>)</span><br><span class="line"><span class="comment">//    @SentinelResource(value = "fallback")   // 没有配置</span></span><br><span class="line"><span class="comment">//    @SentinelResource(value = "fallback",fallback = "handlerFallback")</span></span><br><span class="line">    <span class="meta">@SentinelResource</span>(value = <span class="string">"fallback"</span>,blockHandler = <span class="string">"blockHandler"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fallback</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String result = restTemplate.getForObject(SERVICE_URL+<span class="string">"/payment/"</span>+id,String.class,id);</span><br><span class="line">        <span class="keyword">if</span> (id==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"非法参数异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public String handlerFallback(@PathVariable Long id)&#123;</span></span><br><span class="line"><span class="comment">//        return id+"异常";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">blockHandler</span><span class="params">(Long id, BlockException e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"blockHandler异常"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>访问 84 输入 id=4 模拟异常</p></li><li>结果<br>==没有在sentinel中配置服务降级只会报出异常界面，而fallback不需要配置sentinel==</li><li>再测试<br><img src="imgs/block降级.png"><br>配置异常数为 2 ，单独点 1 次 爆异常界面，连续两次爆blockhandler的方法</li></ol><h6 id="配置fallback-blockHanlder"><a href="#配置fallback-blockHanlder" class="headerlink" title="配置fallback+blockHanlder"></a>配置fallback+blockHanlder</h6><p>未进入限流条件进 fallback，进入限流条件进 blockhandler</p><h6 id="异常忽略"><a href="#异常忽略" class="headerlink" title="异常忽略"></a>异常忽略</h6><p><code>@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;,blockHandler = &quot;blockHandler&quot;,exceptionsToIgnore = RuntimeException.class)</code><br>忽略某种类型的异常</p><h1 id="服务熔断OpenFeign"><a href="#服务熔断OpenFeign" class="headerlink" title="服务熔断OpenFeign"></a>服务熔断OpenFeign</h1><h3 id="更改84"><a href="#更改84" class="headerlink" title="更改84"></a>更改84</h3><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  sentinel:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>main<br>@EnableFeignClients</p></li><li><p>新建service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"nacos-payment-provider"</span>,fallback = PaymentFailService.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建service兜底类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFailService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"feign失败调用"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>更改controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"consumer/payment/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.payment(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试关闭 9003,9004 访问 84 查看是否进入兜底方案</p></li></ol><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><ol><li>简介<br>存到nacos中</li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后续做持久化用到 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    sentinel:</span></span><br><span class="line"><span class="attr">      datasource:</span></span><br><span class="line"><span class="attr">        ds1:</span></span><br><span class="line"><span class="attr">          nacos:</span></span><br><span class="line"><span class="attr">            server-addr:</span> <span class="attr">localhost:8848</span> <span class="comment">#nacos地址</span></span><br><span class="line"><span class="attr">            dataId:</span> <span class="string">cloud-alibaba-sentinel-service</span>  <span class="comment">#微服务名称</span></span><br><span class="line"><span class="attr">            groupId:</span> <span class="string">DEFAULT_GROUP</span>  <span class="comment">#默认分组</span></span><br><span class="line"><span class="attr">            data-type:</span> <span class="string">json</span> <span class="comment">#数据格式</span></span><br><span class="line"><span class="attr">            rule-type:</span> <span class="string">flow</span> <span class="comment">#流控规则</span></span><br></pre></td></tr></table></figure></li><li><p>nocos 8848 中新增配置<br><img src="imgs/sentinel持久化.png"></p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "resource":"/A",//资源名称</span><br><span class="line">        "limitApp":"default",//来源应用</span><br><span class="line">        "grade":1,//阈值类型，0线程数，1QPS</span><br><span class="line">        "count":1,//单机阈值</span><br><span class="line">        "strategy":0,//流控模式，0表示直接，1表示关联，2表示链路</span><br><span class="line">        "controlBehavior":0,//流控效果 ，0表示快速失败，1表示warm up，2表示排队等待</span><br><span class="line">        "clusterMode":false //是否集群</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="5"><li>重启8401，刷新sentinel查看效果</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;官网&quot;&gt;&lt;a href=&quot;#官网&quot; class=&quot;headerlink&quot; title=&quot;官网&quot;&gt;&lt;/a&gt;官网&lt;/h3&gt;&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>17-Ali-Seata</title>
    <link href="http://yoursite.com/2020/08/13/17-Ali-Seata/"/>
    <id>http://yoursite.com/2020/08/13/17-Ali-Seata/</id>
    <published>2020-08-13T08:32:28.000Z</published>
    <updated>2020-08-13T08:44:12.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li>分布式前Java服务与数据库1-&gt;1</li><li>分布式后 1-&gt;1,1&gt;多,多-&gt;多<br>保证多个服务之间的数据一致性<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。<h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><a href="http://seata.io/zh-cn/" target="_blank" rel="noopener">http://seata.io/zh-cn/</a><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><img src="imgs/seata.png"></li></ol><h6 id="一ID-三组件"><a href="#一ID-三组件" class="headerlink" title="一ID+三组件"></a>一ID+三组件</h6><ol><li>id<br>全局唯一的事务ID</li><li>3组件<ol><li>TC - 事务协调者<br>维护全局和分支事务的状态，驱动全局事务提交或回滚。</li><li>TM - 事务管理器<br>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li><li>RM - 资源管理器<br>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。<h6 id="处理过程-1"><a href="#处理过程-1" class="headerlink" title="处理过程"></a>处理过程</h6></li></ol></li><li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID</li><li>XID在微服务调用链路的上下文中传播</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖</li><li>TM 向 TC 发起针对 XID 的全局提交或回滚请求</li><li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求</li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>下载<br><a href="https://github.com/seata/seata/releases" target="_blank" rel="noopener">https://github.com/seata/seata/releases</a></li><li>找到conf下的 file.conf<br>将 mode 改为 db代表将日志存储到数据库<br>修改数据库账号密码端口<br>找到 register.conf<br>将 registry 与 config 里的 type均改为nacos<br>同时修改两者下面的 nacos信息</li><li><p>创建数据库 seata</p></li><li><p>数据库加载文件<br> 查看RANDME.MD server 对应网址即可</p><ol><li><a href="https://github.com/seata/seata/tree/develop/script/client下db中的mysql" target="_blank" rel="noopener">https://github.com/seata/seata/tree/develop/script/client下db中的mysql</a></li></ol></li></ol><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol><li>创建数据库<ol><li>create database seata_order;订单</li><li>create database seata_storage;库存</li><li>create database seata_account;账户信息</li></ol></li><li>建表<ol><li>seata_order下建t_order</li><li>seata_storage下建 t_storage;</li><li>seata_account下建 t_account</li></ol></li><li>建表sql<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_order(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">    user_id <span class="built_in">bigint</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'用户id'</span>,</span><br><span class="line">    product_id <span class="built_in">bigint</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'产品id'</span>,</span><br><span class="line">    <span class="keyword">count</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'数量'</span>,</span><br><span class="line">    money <span class="built_in">decimal</span>(<span class="number">11</span>,<span class="number">0</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'余额'</span>,</span><br><span class="line">    <span class="keyword">status</span> <span class="built_in">int</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'订单状态'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="建模块"><a href="#建模块" class="headerlink" title="建模块"></a>建模块</h3><h6 id="seata-order-service2001"><a href="#seata-order-service2001" class="headerlink" title="seata-order-service2001"></a>seata-order-service2001</h6><ol><li>pom<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- seata --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入与自己版本相同的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>########################## </p><ol><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入与自己版本相同的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p></li><li><p>config.txt nacos-config.sh 上传配置</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>18-Seata配置</title>
    <link href="http://yoursite.com/2020/08/13/18-Seata%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/08/13/18-Seata配置/</id>
    <published>2020-08-13T08:30:41.000Z</published>
    <updated>2020-08-13T08:44:34.993Z</updated>
    
    <content type="html"><![CDATA[<p>本例使用seata1.2</p><h3 id="创建seata数据库"><a href="#创建seata数据库" class="headerlink" title="创建seata数据库"></a>创建seata数据库</h3><ol><li>找到 seata/conf 下的 README-zh.md</li><li><p>进入 <a href="https://github.com/seata/seata/tree/develop/script/server" target="_blank" rel="noopener">server</a></p><ol><li>找到 db 下的 mysql.sql</li><li>创建数据库 seata ，后执行mysql.sql</li><li>mysql.sql中的三张表为 seata配置必须的表 <h3 id="创建业务必须数据库"><a href="#创建业务必须数据库" class="headerlink" title="创建业务必须数据库"></a>创建业务必须数据库</h3>用以做案例<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建数据库，订单</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> seata_order;</span><br><span class="line"><span class="keyword">use</span> seata_order;</span><br><span class="line"><span class="comment">-- 建订单表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_order`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">COLLATE</span>=<span class="string">'utf8_general_ci'</span></span><br><span class="line"><span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span></span><br><span class="line">AUTO_INCREMENT=<span class="number">8</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 建数据库，库存</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> seata_storage;</span><br><span class="line"><span class="comment">-- 建库存表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_storage`</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`num`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">COLLATE</span>=<span class="string">'utf8_general_ci'</span></span><br><span class="line"><span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 初始化库存数量</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_storage <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>找到 seata/conf 下的 README-zh.md</p></li><li>进入 <a href="https://github.com/seata/seata/tree/develop/script/client" target="_blank" rel="noopener">client</a> </li><li>找到db下的mysql.sql<a href="https://github.com/seata/seata/tree/develop/script/client" target="_blank" rel="noopener">client</a> </li><li>其中为一建表sql</li><li>==每一个分布式业务数据库都需要这张表，即在新建的数据库 seata_order 与 seata_storage中新建该表==<h3 id="修改seata1-2"><a href="#修改seata1-2" class="headerlink" title="修改seata1.2"></a>修改seata1.2</h3></li><li>找到 seata/conf/file.conf<br>将 store 下的 mode 改为 db ，代表采用数据库配置<br>更改 store下数据库的相关配置</li><li>找到  seata/conf/registry.conf<br>将 type 改为 nacos 同时修改 nacos中的信息和config下nacos的信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">registry &#123;</span><br><span class="line">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    application = &quot;seata-server&quot;</span><br><span class="line">    serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    cluster = &quot;default&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config &#123;</span><br><span class="line">  # file、nacos 、apollo、zk、consul、etcd3</span><br><span class="line">  type = &quot;nacos&quot;</span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = &quot;localhost:8848&quot;</span><br><span class="line">    namespace = &quot;&quot;</span><br><span class="line">    group = &quot;SEATA_GROUP&quot;</span><br><span class="line">    username = &quot;nacos&quot;</span><br><span class="line">    password = &quot;nacos&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="为nacos添加配置信息"><a href="#为nacos添加配置信息" class="headerlink" title="为nacos添加配置信息"></a>为nacos添加配置信息</h3><ol><li>访问 <a href="https://github.com/seata/seata/tree/develop/script/config-center" target="_blank" rel="noopener">config-center</a></li><li>将 config.txt 拷贝到 seata/下</li><li><p>修改config.txt内容为下列，因为其余配置为默认或无用配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">service.vgroupMapping.my_test_tx_group=default</span><br><span class="line">store.mode=db</span><br><span class="line">store.db.datasource=druid</span><br><span class="line">store.db.dbType=mysql</span><br><span class="line">store.db.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">store.db.url=jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true</span><br><span class="line">store.db.user=root</span><br><span class="line">store.db.password=root</span><br><span class="line">store.db.minConn=5</span><br><span class="line">store.db.maxConn=30</span><br><span class="line">store.db.globalTable=global_table</span><br><span class="line">store.db.branchTable=branch_table</span><br><span class="line">store.db.queryLimit=100</span><br><span class="line">store.db.lockTable=lock_table</span><br><span class="line">store.db.maxWait=5000</span><br></pre></td></tr></table></figure></li><li><p>将 nacos 下的 nacos-config.sh 拷贝到 seata/conf/ 下</p></li><li>启动nacos</li><li>使用 Git Bash Here 切换到 seata/conf/ 下执行命令<code>sh nacos-config.sh</code></li><li>查看nacos中是否有 seata 相关的配置信息。<h3 id="配置业务seata-order-service2001"><a href="#配置业务seata-order-service2001" class="headerlink" title="配置业务seata-order-service2001"></a>配置业务seata-order-service2001</h3></li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入自己的公共api--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wxh.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用openfeign做微服务调用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入与自己版本相同的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">2001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">seata-order-service</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      discovery:</span> <span class="comment">#Nacos注册中心地址</span></span><br><span class="line"><span class="attr">        server-addr:</span> <span class="attr">localhost:8848</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>  <span class="comment">#数据源类型</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>    <span class="comment">#mysql驱动包</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    io:</span></span><br><span class="line"><span class="attr">      seata:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 应用 id 为唯一便于区分</span></span><br><span class="line"><span class="attr">  application-id:</span> <span class="string">order</span></span><br><span class="line">  <span class="comment"># 事务分组，这个是默认分组</span></span><br><span class="line"><span class="attr">  tx-service-group:</span> <span class="string">my_test_tx_group</span></span><br><span class="line"><span class="attr">  config:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      namespace:</span></span><br><span class="line"><span class="attr">      serverAddr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line"><span class="attr">      userName:</span> <span class="string">"nacos"</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">"nacos"</span></span><br><span class="line"><span class="attr">  registry:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">    nacos:</span></span><br><span class="line"><span class="attr">      application:</span> <span class="string">seata-server</span></span><br><span class="line"><span class="attr">      server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">      namespace:</span></span><br><span class="line"><span class="attr">      userName:</span> <span class="string">"nacos"</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">"nacos"</span></span><br></pre></td></tr></table></figure></li><li><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入一条订单</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into t_order values(null,'test')"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service：接口类省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StroageService stroageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// name对应配置文件里的事务分组</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span>(name = <span class="string">"my_test_tx_group"</span>,rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        orderMapper.test();</span><br><span class="line">        stroageService.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>StorageService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"seata-storage-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StroageService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    orderService.test();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置业务模块seata-storage-service2003"><a href="#配置业务模块seata-storage-service2003" class="headerlink" title="配置业务模块seata-storage-service2003"></a>配置业务模块seata-storage-service2003</h3><ol><li>pom 与上一模块相同</li><li>yml 与上一模块相同<ol><li>更改端口号</li><li>更改spring.application.name.</li><li>更改seata.application-id: storage</li></ol></li><li>为了方便省去service由controller直接调用mapper</li><li><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代表库存减1</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"UPDATE t_storage SET num = num-1 WHERE id = 1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StorageMapper storageMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int a = 1/0; // 模拟异常</span></span><br><span class="line"></span><br><span class="line">        storageMapper.test();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"storage"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>正常启动两个模块</li><li>访问<a href="http://localhost:2001/test查看是否能成功访问" target="_blank" rel="noopener">http://localhost:2001/test查看是否能成功访问</a></li><li>启动模拟异常</li><li>将模块 seata-order-service2001 中 OrderServiceImpl.class 下的 stroageService.test();打上断点</li><li>debug 启动seata-order-service2001</li><li>访问 <a href="http://localhost:2001/test" target="_blank" rel="noopener">http://localhost:2001/test</a> </li><li>此时进入断点</li><li>查看 t_order 表中新增一条数据，数据库中 seata_order 下的 undo_log 表中增加信息，代表事务</li><li>数据库 seata_order 的 undo_log 表中添加事务信息</li><li>结束执行代码</li><li>t_order 表中数据消失</li><li>数据库 seata_order 的 undo_log 表数据消失</li><li>测试成功</li></ol><h3 id="修改事务分组"><a href="#修改事务分组" class="headerlink" title="修改事务分组"></a>修改事务分组</h3><ol><li>yml中<br>seata:<br>tx-service-group: test</li><li>nacos中新增配置<br>service.vgroupMapping.test<br>内容为 default</li><li>service.vgroupMapping.test 的值为集群名称，test即事务分组 ，default代表无集群</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本例使用seata1.2&lt;/p&gt;
&lt;h3 id=&quot;创建seata数据库&quot;&gt;&lt;a href=&quot;#创建seata数据库&quot; class=&quot;headerlink&quot; title=&quot;创建seata数据库&quot;&gt;&lt;/a&gt;创建seata数据库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;找到 seata/con
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用hexo编写自己的博客</title>
    <link href="http://yoursite.com/2018/08/13/%E4%BD%BF%E7%94%A8hexo%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/08/13/使用hexo编写自己的博客/</id>
    <published>2018-08-13T07:49:10.000Z</published>
    <updated>2018-08-13T09:47:35.795Z</updated>
    
    <content type="html"><![CDATA[<p>#使用hexo编写自己的博客</p><p>##一、安装必要的软件<br>1、<a href="http://nodejs.cn/" target="_blank" rel="noopener">安装nodejs</a></p><p>2、<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装Git</a></p><p>3、使用npm安装Hexo: <strong>$npm install -g hexo-cli</strong></p><p>##二、快速搭建博客<br>1、初始化hexo仓库，选择一个目录作为你编写博客的根目录，cd到该目录。 <strong>$hexo init</strong> </p><p>2、初始化博客空间，生成博客运作所需要的文件，接下来安装依赖包。 <strong>$npm install</strong></p><p>3、发表第一篇文章，在hexo根目录下，创建文章。 <strong>$hexo new “我的第一篇文章”</strong>，<br>这样就会在博客目录下source_posts中生成相应的 我的第一篇文章.md文件(例如 C:\blog\source_posts\我的第一篇文章.md)。</p><p>4、使用markdown语法编写source_posts中生成的”我的第一篇文章.md”。</p><p>5、清除之前编译好的缓存 <strong>$hexo clean</strong></p><p>6、生成对应的组件和文章 <strong>$hexo generate</strong></p><p>7、启动本地服务器查看效果<a href="http://localhost:4000。" target="_blank" rel="noopener">http://localhost:4000。</a> <strong>$hexo server</strong></p><p>8、在github上建立一个仓库，名字设为  “<strong><em>github名字.github.io</em></strong>“</p><p>9、修改hexo站点的配置文件，打开_congfig.yml，修改github地址，例如</p><pre><code>deploy:  type: git  repo: https://github.com/zzStore/zzStore.github.io  branch: master</code></pre><p>10、上传编写好的博客至github上。<strong>$hexo deploy</strong></p><p>##三、登录到刚才编写好的博客上<br>“<strong><em>github名字.github.io</em></strong>“</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#使用hexo编写自己的博客&lt;/p&gt;
&lt;p&gt;##一、安装必要的软件&lt;br&gt;1、&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安装nodejs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href=&quot;https://
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
